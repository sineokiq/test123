{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { makeApi } from '@superset-ui/core';\nimport { dashboardInfoChanged } from './dashboardInfo';\nexport const SET_FILTER_CONFIG_BEGIN = 'SET_FILTER_CONFIG_BEGIN';\nexport const SET_FILTER_CONFIG_COMPLETE = 'SET_FILTER_CONFIG_COMPLETE';\nexport const SET_FILTER_CONFIG_FAIL = 'SET_FILTER_CONFIG_FAIL';\nexport const SET_FILTER_STATE = 'SET_FILTER_STATE';\nexport const setFilterConfiguration = filterConfig => async (dispatch, getState) => {\n  dispatch({\n    type: SET_FILTER_CONFIG_BEGIN,\n    filterConfig });\n\n  const { id, metadata } = getState().dashboardInfo;\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}` });\n\n  try {\n    const response = await updateDashboard({\n      json_metadata: _JSON$stringify({\n        ...metadata,\n        filter_configuration: filterConfig }) });\n\n\n    dispatch(dashboardInfoChanged({\n      metadata: JSON.parse(response.result.json_metadata) }));\n\n    dispatch({\n      type: SET_FILTER_CONFIG_COMPLETE,\n      filterConfig });\n\n  }\n  catch (err) {\n    dispatch({ type: SET_FILTER_CONFIG_FAIL, filterConfig });\n  }\n};\nexport const SET_EXTRA_FORM_DATA = 'SET_EXTRA_FORM_DATA';\nexport function setFilterState(selectedValues, filter, filters) {\n  return {\n    type: SET_FILTER_STATE,\n    selectedValues,\n    filter,\n    filters };\n\n}\n/**\n * Sets the selected option(s) for a given filter\n * @param filterId the id of the native filter\n * @param extraFormData the selection translated into extra form data\n */\nexport function setExtraFormData(filterId, extraFormData) {\n  return {\n    type: SET_EXTRA_FORM_DATA,\n    filterId,\n    extraFormData };\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SET_FILTER_CONFIG_BEGIN, \"SET_FILTER_CONFIG_BEGIN\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_FILTER_CONFIG_COMPLETE, \"SET_FILTER_CONFIG_COMPLETE\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_FILTER_CONFIG_FAIL, \"SET_FILTER_CONFIG_FAIL\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_FILTER_STATE, \"SET_FILTER_STATE\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(setFilterConfiguration, \"setFilterConfiguration\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(SET_EXTRA_FORM_DATA, \"SET_EXTRA_FORM_DATA\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(setFilterState, \"setFilterState\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");reactHotLoader.register(setExtraFormData, \"setExtraFormData\", \"/app/superset-frontend/src/dashboard/actions/nativeFilters.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/actions/nativeFilters.ts"],"names":[],"mappings":"2XAAA;;;;;;;;;;;;;;;;;AAiBG;AAEH,SAAwB,OAAxB,QAAuC,mBAAvC;AAOA,SAAS,oBAAT,QAAqC,iBAArC;AAEA,OAAO,MAAM,uBAAuB,GAAG,yBAAhC;AAKP,OAAO,MAAM,0BAA0B,GAAG,4BAAnC;AAKP,OAAO,MAAM,sBAAsB,GAAG,wBAA/B;AAMP,OAAO,MAAM,gBAAgB,GAAG,kBAAzB;AAaP,OAAO,MAAM,sBAAsB,GACjC,YADoC,IAEjC,OAAO,QAAP,EAA2B,QAA3B,KAAkD;AACrD,EAAA,QAAQ,CAAC;AACP,IAAA,IAAI,EAAE,uBADC;AAEP,IAAA,YAFO,EAAD,CAAR;;AAIA,QAAM,EAAE,EAAF,EAAM,QAAN,KAAmB,QAAQ,GAAG,aAApC;AAEA;AACA,QAAM,eAAe,GAAG,OAAO,CAG7B;AACA,IAAA,MAAM,EAAE,KADR;AAEA,IAAA,QAAQ,EAAE,qBAAqB,EAAE,EAFjC,EAH6B,CAA/B;;AAQA,MAAI;AACF,UAAM,QAAQ,GAAG,MAAM,eAAe,CAAC;AACrC,MAAA,aAAa,EAAE,gBAAe;AAC5B,WAAG,QADyB;AAE5B,QAAA,oBAAoB,EAAE,YAFM,EAAf,CADsB,EAAD,CAAtC;;;AAMA,IAAA,QAAQ,CACN,oBAAoB,CAAC;AACnB,MAAA,QAAQ,EAAE,IAAI,CAAC,KAAL,CAAW,QAAQ,CAAC,MAAT,CAAgB,aAA3B,CADS,EAAD,CADd,CAAR;;AAKA,IAAA,QAAQ,CAAC;AACP,MAAA,IAAI,EAAE,0BADC;AAEP,MAAA,YAFO,EAAD,CAAR;;AAID;AAAC,SAAO,GAAP,EAAY;AACZ,IAAA,QAAQ,CAAC,EAAE,IAAI,EAAE,sBAAR,EAAgC,YAAhC,EAAD,CAAR;AACD;AACF,CArCM;AAuCP,OAAO,MAAM,mBAAmB,GAAG,qBAA5B;AAOP,OAAM,SAAU,cAAV,CACJ,cADI,EAEJ,MAFI,EAGJ,OAHI,EAGwB;AAE5B,SAAO;AACL,IAAA,IAAI,EAAE,gBADD;AAEL,IAAA,cAFK;AAGL,IAAA,MAHK;AAIL,IAAA,OAJK,EAAP;;AAMD;AACD;;;;AAIG;AACH,OAAM,SAAU,gBAAV,CACJ,QADI,EAEJ,aAFI,EAEwB;AAE5B,SAAO;AACL,IAAA,IAAI,EAAE,mBADD;AAEL,IAAA,QAFK;AAGL,IAAA,aAHK,EAAP;;AAKD,C,iLArGY,uB,sHAKA,0B,yHAKA,sB,qHAMA,gB,+GAaA,sB,qHAuCA,mB,kHAOG,c,6GAiBA,gB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport { ExtraFormData, makeApi } from '@superset-ui/core';\nimport { Dispatch } from 'redux';\nimport {\n  Filter,\n  FilterConfiguration,\n  SelectedValues,\n} from 'src/dashboard/components/nativeFilters/types';\nimport { dashboardInfoChanged } from './dashboardInfo';\n\nexport const SET_FILTER_CONFIG_BEGIN = 'SET_FILTER_CONFIG_BEGIN';\nexport interface SetFilterConfigBegin {\n  type: typeof SET_FILTER_CONFIG_BEGIN;\n  filterConfig: FilterConfiguration;\n}\nexport const SET_FILTER_CONFIG_COMPLETE = 'SET_FILTER_CONFIG_COMPLETE';\nexport interface SetFilterConfigComplete {\n  type: typeof SET_FILTER_CONFIG_COMPLETE;\n  filterConfig: FilterConfiguration;\n}\nexport const SET_FILTER_CONFIG_FAIL = 'SET_FILTER_CONFIG_FAIL';\nexport interface SetFilterConfigFail {\n  type: typeof SET_FILTER_CONFIG_FAIL;\n  filterConfig: FilterConfiguration;\n}\n\nexport const SET_FILTER_STATE = 'SET_FILTER_STATE';\nexport interface SetFilterState {\n  type: typeof SET_FILTER_STATE;\n  selectedValues: SelectedValues;\n  filter: Filter;\n  filters: FilterConfiguration;\n}\n\ninterface DashboardInfo {\n  id: number;\n  json_metadata: string;\n}\n\nexport const setFilterConfiguration = (\n  filterConfig: FilterConfiguration,\n) => async (dispatch: Dispatch, getState: () => any) => {\n  dispatch({\n    type: SET_FILTER_CONFIG_BEGIN,\n    filterConfig,\n  });\n  const { id, metadata } = getState().dashboardInfo;\n\n  // TODO extract this out when makeApi supports url parameters\n  const updateDashboard = makeApi<\n    Partial<DashboardInfo>,\n    { result: DashboardInfo }\n  >({\n    method: 'PUT',\n    endpoint: `/api/v1/dashboard/${id}`,\n  });\n\n  try {\n    const response = await updateDashboard({\n      json_metadata: JSON.stringify({\n        ...metadata,\n        filter_configuration: filterConfig,\n      }),\n    });\n    dispatch(\n      dashboardInfoChanged({\n        metadata: JSON.parse(response.result.json_metadata),\n      }),\n    );\n    dispatch({\n      type: SET_FILTER_CONFIG_COMPLETE,\n      filterConfig,\n    });\n  } catch (err) {\n    dispatch({ type: SET_FILTER_CONFIG_FAIL, filterConfig });\n  }\n};\n\nexport const SET_EXTRA_FORM_DATA = 'SET_EXTRA_FORM_DATA';\nexport interface SetExtraFormData {\n  type: typeof SET_EXTRA_FORM_DATA;\n  filterId: string;\n  extraFormData: ExtraFormData;\n}\n\nexport function setFilterState(\n  selectedValues: SelectedValues,\n  filter: Filter,\n  filters: FilterConfiguration,\n) {\n  return {\n    type: SET_FILTER_STATE,\n    selectedValues,\n    filter,\n    filters,\n  };\n}\n/**\n * Sets the selected option(s) for a given filter\n * @param filterId the id of the native filter\n * @param extraFormData the selection translated into extra form data\n */\nexport function setExtraFormData(\n  filterId: string,\n  extraFormData: ExtraFormData,\n): SetExtraFormData {\n  return {\n    type: SET_EXTRA_FORM_DATA,\n    filterId,\n    extraFormData,\n  };\n}\n\nexport type AnyFilterAction =\n  | SetFilterConfigBegin\n  | SetFilterConfigComplete\n  | SetFilterConfigFail\n  | SetExtraFormData\n  | SetFilterState;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}