{"ast":null,"code":"import _kebabCase from \"lodash/kebabCase\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Tooltip } from 'src/common/components/Tooltip';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  label: PropTypes.string.isRequired,\n  tooltip: PropTypes.node.isRequired,\n  children: PropTypes.node.isRequired,\n  placement: PropTypes.string,\n  trigger: PropTypes.oneOfType([\n  PropTypes.string,\n  PropTypes.arrayOf(PropTypes.string)]) };\n\n\n\nconst defaultProps = {\n  placement: 'top' };\n\n\nexport default function TooltipWrapper({\n  label,\n  tooltip,\n  children,\n  placement,\n  trigger })\n{\n  return (\n    ___EmotionJSX(Tooltip, {\n      id: `${_kebabCase(label)}-tooltip`,\n      placement: placement,\n      title: tooltip,\n      trigger: trigger },\n\n    children));\n\n\n}\n\nTooltipWrapper.propTypes = propTypes;\nTooltipWrapper.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/components/TooltipWrapper.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/components/TooltipWrapper.jsx\");reactHotLoader.register(TooltipWrapper, \"TooltipWrapper\", \"/app/superset-frontend/src/components/TooltipWrapper.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/TooltipWrapper.jsx"],"names":["React","PropTypes","Tooltip","propTypes","label","string","isRequired","tooltip","node","children","placement","trigger","oneOfType","arrayOf","defaultProps","TooltipWrapper"],"mappings":"kVAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,OAAT,QAAwB,+BAAxB,C;;AAEA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAEH,SAAS,CAACI,MAAV,CAAiBC,UADR;AAEhBC,EAAAA,OAAO,EAAEN,SAAS,CAACO,IAAV,CAAeF,UAFR;AAGhBG,EAAAA,QAAQ,EAAER,SAAS,CAACO,IAAV,CAAeF,UAHT;AAIhBI,EAAAA,SAAS,EAAET,SAAS,CAACI,MAJL;AAKhBM,EAAAA,OAAO,EAAEV,SAAS,CAACW,SAAV,CAAoB;AAC3BX,EAAAA,SAAS,CAACI,MADiB;AAE3BJ,EAAAA,SAAS,CAACY,OAAV,CAAkBZ,SAAS,CAACI,MAA5B,CAF2B,CAApB,CALO,EAAlB;;;;AAWA,MAAMS,YAAY,GAAG;AACnBJ,EAAAA,SAAS,EAAE,KADQ,EAArB;;;AAIA,eAAe,SAASK,cAAT,CAAwB;AACrCX,EAAAA,KADqC;AAErCG,EAAAA,OAFqC;AAGrCE,EAAAA,QAHqC;AAIrCC,EAAAA,SAJqC;AAKrCC,EAAAA,OALqC,EAAxB;AAMZ;AACD;AACE,kBAAC,OAAD;AACE,MAAA,EAAE,EAAG,GAAE,WAAUP,KAAV,CAAiB,UAD1B;AAEE,MAAA,SAAS,EAAEM,SAFb;AAGE,MAAA,KAAK,EAAEH,OAHT;AAIE,MAAA,OAAO,EAAEI,OAJX;;AAMGF,IAAAA,QANH,CADF;;;AAUD;;AAEDM,cAAc,CAACZ,SAAf,GAA2BA,SAA3B;AACAY,cAAc,CAACD,YAAf,GAA8BA,YAA9B,C,iLAnCMX,S,mGAWAW,Y,sGAIkBC,c","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { kebabCase } from 'lodash';\nimport { Tooltip } from 'src/common/components/Tooltip';\n\nconst propTypes = {\n  label: PropTypes.string.isRequired,\n  tooltip: PropTypes.node.isRequired,\n  children: PropTypes.node.isRequired,\n  placement: PropTypes.string,\n  trigger: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.arrayOf(PropTypes.string),\n  ]),\n};\n\nconst defaultProps = {\n  placement: 'top',\n};\n\nexport default function TooltipWrapper({\n  label,\n  tooltip,\n  children,\n  placement,\n  trigger,\n}) {\n  return (\n    <Tooltip\n      id={`${kebabCase(label)}-tooltip`}\n      placement={placement}\n      title={tooltip}\n      trigger={trigger}\n    >\n      {children}\n    </Tooltip>\n  );\n}\n\nTooltipWrapper.propTypes = propTypes;\nTooltipWrapper.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}