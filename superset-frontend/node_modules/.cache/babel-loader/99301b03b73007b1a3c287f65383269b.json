{"ast":null,"code":"import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport { selectIndicatorsForChart, IndicatorStatus } from 'src/dashboard/components/FiltersBadge/selectors';\nimport FiltersBadge from 'src/dashboard/components/FiltersBadge';\nconst mapDispatchToProps = dispatch => bindActionCreators({\n  onHighlightFilterSource: setDirectPathToChild },\ndispatch);\nconst mapStateToProps = ({ datasources, dashboardFilters, charts }, { chartId }) => {\n  const indicators = selectIndicatorsForChart(chartId, dashboardFilters, datasources, charts);\n  const appliedIndicators = _filterInstanceProperty(indicators).call(indicators, indicator => indicator.status === IndicatorStatus.Applied);\n  const unsetIndicators = _filterInstanceProperty(indicators).call(indicators, indicator => indicator.status === IndicatorStatus.Unset);\n  const incompatibleIndicators = _filterInstanceProperty(indicators).call(indicators, indicator => indicator.status === IndicatorStatus.Incompatible);\n  return {\n    chartId,\n    appliedIndicators,\n    unsetIndicators,\n    incompatibleIndicators };\n\n};const _default =\nconnect(mapStateToProps, mapDispatchToProps)(FiltersBadge);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/app/superset-frontend/src/dashboard/containers/FiltersBadge.tsx\");reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/app/superset-frontend/src/dashboard/containers/FiltersBadge.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/containers/FiltersBadge.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/containers/FiltersBadge.tsx"],"names":[],"mappings":"oYAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SAAS,OAAT,QAAwB,aAAxB;AACA,SAAS,kBAAT,QAA6C,OAA7C;AACA,SAAS,oBAAT,QAAqC,sCAArC;AACA,SACE,wBADF,EAEE,eAFF,QAGO,iDAHP;AAIA,OAAO,YAAP,MAAyB,uCAAzB;AAMA,MAAM,kBAAkB,GAAI,QAAD,IACzB,kBAAkB,CAChB;AACE,EAAA,uBAAuB,EAAE,oBAD3B,EADgB;AAIhB,QAJgB,CADpB;AAQA,MAAM,eAAe,GAAG,CACtB,EAAE,WAAF,EAAe,gBAAf,EAAiC,MAAjC,EADsB,EAEtB,EAAE,OAAF,EAFsB,KAGpB;AACF,QAAM,UAAU,GAAG,wBAAwB,CACzC,OADyC,EAEzC,gBAFyC,EAGzC,WAHyC,EAIzC,MAJyC,CAA3C;AAOA,QAAM,iBAAiB,GAAG,wBAAA,UAAU,MAAV,CAAA,UAAU,EAClC,SAAS,IAAI,SAAS,CAAC,MAAV,KAAqB,eAAe,CAAC,OADhB,CAApC;AAGA,QAAM,eAAe,GAAG,wBAAA,UAAU,MAAV,CAAA,UAAU,EAChC,SAAS,IAAI,SAAS,CAAC,MAAV,KAAqB,eAAe,CAAC,KADlB,CAAlC;AAGA,QAAM,sBAAsB,GAAG,wBAAA,UAAU,MAAV,CAAA,UAAU,EACvC,SAAS,IAAI,SAAS,CAAC,MAAV,KAAqB,eAAe,CAAC,YADX,CAAzC;AAIA,SAAO;AACL,IAAA,OADK;AAEL,IAAA,iBAFK;AAGL,IAAA,eAHK;AAIL,IAAA,sBAJK,EAAP;;AAMD,CA3BD,C;AA6Be,OAAO,CAAC,eAAD,EAAkB,kBAAlB,CAAP,CAA6C,YAA7C,C,CAAf,wB,iLArCM,kB,oHAQA,e","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { connect } from 'react-redux';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { setDirectPathToChild } from 'src/dashboard/actions/dashboardState';\nimport {\n  selectIndicatorsForChart,\n  IndicatorStatus,\n} from 'src/dashboard/components/FiltersBadge/selectors';\nimport FiltersBadge from 'src/dashboard/components/FiltersBadge';\n\nexport interface FiltersBadgeProps {\n  chartId: number;\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    {\n      onHighlightFilterSource: setDirectPathToChild,\n    },\n    dispatch,\n  );\n\nconst mapStateToProps = (\n  { datasources, dashboardFilters, charts }: any,\n  { chartId }: FiltersBadgeProps,\n) => {\n  const indicators = selectIndicatorsForChart(\n    chartId,\n    dashboardFilters,\n    datasources,\n    charts,\n  );\n\n  const appliedIndicators = indicators.filter(\n    indicator => indicator.status === IndicatorStatus.Applied,\n  );\n  const unsetIndicators = indicators.filter(\n    indicator => indicator.status === IndicatorStatus.Unset,\n  );\n  const incompatibleIndicators = indicators.filter(\n    indicator => indicator.status === IndicatorStatus.Incompatible,\n  );\n\n  return {\n    chartId,\n    appliedIndicators,\n    unsetIndicators,\n    incompatibleIndicators,\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FiltersBadge);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}