{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t } from '@superset-ui/core';\nimport { getFormDataFromControls } from 'src/explore/controlUtils';\nimport { now } from '../modules/dates';\nimport * as actions from './chartAction';\n\nexport const chart = {\n  id: 0,\n  chartAlert: null,\n  chartStatus: 'loading',\n  chartStackTrace: null,\n  chartUpdateEndTime: null,\n  chartUpdateStartTime: 0,\n  latestQueryFormData: {},\n  queryController: null,\n  queriesResponse: null,\n  triggerQuery: true,\n  lastRendered: 0 };\n\n\nexport default function chartReducer(charts = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_CHART]() {\n      return {\n        ...chart,\n        ...action.chart };\n\n    },\n    [actions.CHART_UPDATE_SUCCEEDED](state) {\n      return {\n        ...state,\n        chartStatus: 'success',\n        chartAlert: null,\n        queriesResponse: action.queriesResponse,\n        chartUpdateEndTime: now() };\n\n    },\n    [actions.CHART_UPDATE_STARTED](state) {\n      return {\n        ...state,\n        chartStatus: 'loading',\n        chartStackTrace: null,\n        chartAlert: null,\n        chartUpdateEndTime: null,\n        chartUpdateStartTime: now(),\n        queryController: action.queryController };\n\n    },\n    [actions.CHART_UPDATE_STOPPED](state) {\n      return {\n        ...state,\n        chartStatus: 'stopped',\n        chartAlert: t('Updating chart was stopped'),\n        chartUpdateEndTime: now() };\n\n    },\n    [actions.CHART_UPDATE_QUEUED](state) {\n      return {\n        ...state,\n        asyncJobId: action.asyncJobMeta.job_id,\n        chartStatus: 'loading',\n        chartUpdateEndTime: now() };\n\n    },\n    [actions.CHART_RENDERING_SUCCEEDED](state) {\n      return { ...state, chartStatus: 'rendered', chartUpdateEndTime: now() };\n    },\n    [actions.CHART_RENDERING_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartStackTrace: action.stackTrace,\n        chartAlert: t(\n        'An error occurred while rendering the visualization: %s',\n        action.error) };\n\n\n    },\n    [actions.CHART_UPDATE_FAILED](state) {var _action$queriesRespon, _action$queriesRespon2, _action$queriesRespon3, _action$queriesRespon4;\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartAlert: action.queriesResponse ? (_action$queriesRespon =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon2 = _action$queriesRespon[0]) == null ? void 0 : _action$queriesRespon2.error :\n        t('Network error.'),\n        chartUpdateEndTime: now(),\n        queriesResponse: action.queriesResponse,\n        chartStackTrace: action.queriesResponse ? (_action$queriesRespon3 =\n        action.queriesResponse) == null ? void 0 : (_action$queriesRespon4 = _action$queriesRespon3[0]) == null ? void 0 : _action$queriesRespon4.stacktrace :\n        null };\n\n    },\n    [actions.DYNAMIC_PLUGIN_CONTROLS_READY](state) {\n      const sliceFormData = getFormDataFromControls(action.controlsState);\n      return { ...state, sliceFormData };\n    },\n    [actions.TRIGGER_QUERY](state) {\n      return {\n        ...state,\n        triggerQuery: action.value,\n        chartStatus: 'loading' };\n\n    },\n    [actions.RENDER_TRIGGERED](state) {\n      return { ...state, lastRendered: action.value };\n    },\n    [actions.UPDATE_QUERY_FORM_DATA](state) {\n      return { ...state, latestQueryFormData: action.value };\n    },\n    [actions.ANNOTATION_QUERY_STARTED](state) {\n      if (\n      state.annotationQuery &&\n      state.annotationQuery[action.annotation.name])\n      {\n        state.annotationQuery[action.annotation.name].abort();\n      }\n      const annotationQuery = {\n        ...state.annotationQuery,\n        [action.annotation.name]: action.queryRequest };\n\n      return {\n        ...state,\n        annotationQuery };\n\n    },\n    [actions.ANNOTATION_QUERY_SUCCESS](state) {\n      const annotationData = {\n        ...state.annotationData,\n        [action.annotation.name]: action.queryResponse.data };\n\n      const annotationError = { ...state.annotationError };\n      delete annotationError[action.annotation.name];\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery };\n\n    },\n    [actions.ANNOTATION_QUERY_FAILED](state) {\n      const annotationData = { ...state.annotationData };\n      delete annotationData[action.annotation.name];\n      const annotationError = {\n        ...state.annotationError,\n        [action.annotation.name]: action.queryResponse ?\n        action.queryResponse.error :\n        t('Network error.') };\n\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery };\n\n    } };\n\n\n  /* eslint-disable no-param-reassign */\n  if (action.type === actions.REMOVE_CHART) {\n    delete charts[action.key];\n    return charts;\n  }\n  if (action.type === actions.UPDATE_CHART_ID) {\n    const { newId, key } = action;\n    charts[newId] = {\n      ...charts[key],\n      id: newId };\n\n    delete charts[key];\n    return charts;\n  }\n\n  if (action.type in actionHandlers) {\n    return {\n      ...charts,\n      [action.key]: actionHandlers[action.type](charts[action.key]) };\n\n  }\n\n  return charts;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(chart, \"chart\", \"/app/superset-frontend/src/chart/chartReducer.js\");reactHotLoader.register(chartReducer, \"chartReducer\", \"/app/superset-frontend/src/chart/chartReducer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/chart/chartReducer.js"],"names":["t","getFormDataFromControls","now","actions","chart","id","chartAlert","chartStatus","chartStackTrace","chartUpdateEndTime","chartUpdateStartTime","latestQueryFormData","queryController","queriesResponse","triggerQuery","lastRendered","chartReducer","charts","action","actionHandlers","ADD_CHART","CHART_UPDATE_SUCCEEDED","state","CHART_UPDATE_STARTED","CHART_UPDATE_STOPPED","CHART_UPDATE_QUEUED","asyncJobId","asyncJobMeta","job_id","CHART_RENDERING_SUCCEEDED","CHART_RENDERING_FAILED","stackTrace","error","CHART_UPDATE_FAILED","stacktrace","DYNAMIC_PLUGIN_CONTROLS_READY","sliceFormData","controlsState","TRIGGER_QUERY","value","RENDER_TRIGGERED","UPDATE_QUERY_FORM_DATA","ANNOTATION_QUERY_STARTED","annotationQuery","annotation","name","abort","queryRequest","ANNOTATION_QUERY_SUCCESS","annotationData","queryResponse","data","annotationError","ANNOTATION_QUERY_FAILED","type","REMOVE_CHART","key","UPDATE_CHART_ID","newId"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t } from '@superset-ui/core';\nimport { getFormDataFromControls } from 'src/explore/controlUtils';\nimport { now } from '../modules/dates';\nimport * as actions from './chartAction';\n\nexport const chart = {\n  id: 0,\n  chartAlert: null,\n  chartStatus: 'loading',\n  chartStackTrace: null,\n  chartUpdateEndTime: null,\n  chartUpdateStartTime: 0,\n  latestQueryFormData: {},\n  queryController: null,\n  queriesResponse: null,\n  triggerQuery: true,\n  lastRendered: 0,\n};\n\nexport default function chartReducer(charts = {}, action) {\n  const actionHandlers = {\n    [actions.ADD_CHART]() {\n      return {\n        ...chart,\n        ...action.chart,\n      };\n    },\n    [actions.CHART_UPDATE_SUCCEEDED](state) {\n      return {\n        ...state,\n        chartStatus: 'success',\n        chartAlert: null,\n        queriesResponse: action.queriesResponse,\n        chartUpdateEndTime: now(),\n      };\n    },\n    [actions.CHART_UPDATE_STARTED](state) {\n      return {\n        ...state,\n        chartStatus: 'loading',\n        chartStackTrace: null,\n        chartAlert: null,\n        chartUpdateEndTime: null,\n        chartUpdateStartTime: now(),\n        queryController: action.queryController,\n      };\n    },\n    [actions.CHART_UPDATE_STOPPED](state) {\n      return {\n        ...state,\n        chartStatus: 'stopped',\n        chartAlert: t('Updating chart was stopped'),\n        chartUpdateEndTime: now(),\n      };\n    },\n    [actions.CHART_UPDATE_QUEUED](state) {\n      return {\n        ...state,\n        asyncJobId: action.asyncJobMeta.job_id,\n        chartStatus: 'loading',\n        chartUpdateEndTime: now(),\n      };\n    },\n    [actions.CHART_RENDERING_SUCCEEDED](state) {\n      return { ...state, chartStatus: 'rendered', chartUpdateEndTime: now() };\n    },\n    [actions.CHART_RENDERING_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartStackTrace: action.stackTrace,\n        chartAlert: t(\n          'An error occurred while rendering the visualization: %s',\n          action.error,\n        ),\n      };\n    },\n    [actions.CHART_UPDATE_FAILED](state) {\n      return {\n        ...state,\n        chartStatus: 'failed',\n        chartAlert: action.queriesResponse\n          ? action.queriesResponse?.[0]?.error\n          : t('Network error.'),\n        chartUpdateEndTime: now(),\n        queriesResponse: action.queriesResponse,\n        chartStackTrace: action.queriesResponse\n          ? action.queriesResponse?.[0]?.stacktrace\n          : null,\n      };\n    },\n    [actions.DYNAMIC_PLUGIN_CONTROLS_READY](state) {\n      const sliceFormData = getFormDataFromControls(action.controlsState);\n      return { ...state, sliceFormData };\n    },\n    [actions.TRIGGER_QUERY](state) {\n      return {\n        ...state,\n        triggerQuery: action.value,\n        chartStatus: 'loading',\n      };\n    },\n    [actions.RENDER_TRIGGERED](state) {\n      return { ...state, lastRendered: action.value };\n    },\n    [actions.UPDATE_QUERY_FORM_DATA](state) {\n      return { ...state, latestQueryFormData: action.value };\n    },\n    [actions.ANNOTATION_QUERY_STARTED](state) {\n      if (\n        state.annotationQuery &&\n        state.annotationQuery[action.annotation.name]\n      ) {\n        state.annotationQuery[action.annotation.name].abort();\n      }\n      const annotationQuery = {\n        ...state.annotationQuery,\n        [action.annotation.name]: action.queryRequest,\n      };\n      return {\n        ...state,\n        annotationQuery,\n      };\n    },\n    [actions.ANNOTATION_QUERY_SUCCESS](state) {\n      const annotationData = {\n        ...state.annotationData,\n        [action.annotation.name]: action.queryResponse.data,\n      };\n      const annotationError = { ...state.annotationError };\n      delete annotationError[action.annotation.name];\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery,\n      };\n    },\n    [actions.ANNOTATION_QUERY_FAILED](state) {\n      const annotationData = { ...state.annotationData };\n      delete annotationData[action.annotation.name];\n      const annotationError = {\n        ...state.annotationError,\n        [action.annotation.name]: action.queryResponse\n          ? action.queryResponse.error\n          : t('Network error.'),\n      };\n      const annotationQuery = { ...state.annotationQuery };\n      delete annotationQuery[action.annotation.name];\n      return {\n        ...state,\n        annotationData,\n        annotationError,\n        annotationQuery,\n      };\n    },\n  };\n\n  /* eslint-disable no-param-reassign */\n  if (action.type === actions.REMOVE_CHART) {\n    delete charts[action.key];\n    return charts;\n  }\n  if (action.type === actions.UPDATE_CHART_ID) {\n    const { newId, key } = action;\n    charts[newId] = {\n      ...charts[key],\n      id: newId,\n    };\n    delete charts[key];\n    return charts;\n  }\n\n  if (action.type in actionHandlers) {\n    return {\n      ...charts,\n      [action.key]: actionHandlers[action.type](charts[action.key]),\n    };\n  }\n\n  return charts;\n}\n"]},"metadata":{},"sourceType":"module"}