{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _parseInt from \"@babel/runtime-corejs3/core-js-stable/parse-int\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _JSON$stringify from \"@babel/runtime-corejs3/core-js-stable/json/stringify\";import _Promise from \"@babel/runtime-corejs3/core-js-stable/promise\";import _Object$assign from \"@babel/runtime-corejs3/core-js-stable/object/assign\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport JSONbig from 'json-bigint';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport invert from 'lodash/invert';\nimport mapKeys from 'lodash/mapKeys';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\n\nimport { now } from '../../modules/dates';\nimport {\naddDangerToast as addDangerToastAction,\naddInfoToast as addInfoToastAction,\naddSuccessToast as addSuccessToastAction,\naddWarningToast as addWarningToastAction } from\n'../../messageToasts/actions/index';\nimport { getClientErrorObject } from '../../utils/getClientErrorObject';\nimport COMMON_ERR_MESSAGES from '../../utils/errorMessages';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLE = 'REMOVE_TABLE';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_SCHEMA_OPTIONS =\n'QUERY_EDITOR_SET_SCHEMA_OPTIONS';\nexport const QUERY_EDITOR_SET_TABLE_OPTIONS = 'QUERY_EDITOR_SET_TABLE_OPTIONS';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const START_QUERY_VALIDATION = 'START_QUERY_VALIDATION';\nexport const QUERY_VALIDATION_RETURNED = 'QUERY_VALIDATION_RETURNED';\nexport const QUERY_VALIDATION_FAILED = 'QUERY_VALIDATION_FAILED';\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW' };\n\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  client_id: 'id',\n  label: 'title' };\n\nconst queryServerMapping = invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = mapping => (obj) =>\nmapKeys(obj, (value, key) => key in mapping ? mapping[key] : key);\n\nconst convertQueryToServer = fieldConverter(queryServerMapping);\nconst convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function resetState() {\n  return { type: RESET_STATE };\n}\n\nexport function startQueryValidation(query) {\n  _Object$assign(query, {\n    id: query.id ? query.id : shortid.generate() });\n\n  return { type: START_QUERY_VALIDATION, query };\n}\n\nexport function queryValidationReturned(query, results) {\n  return { type: QUERY_VALIDATION_RETURNED, query, results };\n}\n\nexport function queryValidationFailed(query, message, error) {\n  return { type: QUERY_VALIDATION_FAILED, query, message, error };\n}\n\nexport function saveQuery(query) {\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/savedqueryviewapi/api/create',\n    postPayload: convertQueryToServer(query),\n    stringify: false }).\n\n  then(result => {\n    dispatch({\n      type: QUERY_EDITOR_SAVED,\n      query,\n      result: convertQueryToClient(result.json.item) });\n\n    dispatch(addSuccessToast(t('Your query was saved')));\n  }).\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be saved'))));\n\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function updateSavedQuery(query) {\n  return (dispatch) =>\n  SupersetClient.put({\n    endpoint: `/savedqueryviewapi/api/update/${query.remoteId}`,\n    postPayload: convertQueryToServer(query),\n    stringify: false }).\n\n  then(() => dispatch(addSuccessToast(t('Your query was updated')))).\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be updated')))).\n\n  then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function scheduleQuery(query) {\n  return (dispatch) =>\n  SupersetClient.post({\n    endpoint: '/savedqueryviewapi/api/create',\n    postPayload: query,\n    stringify: false }).\n\n  then(() =>\n  dispatch(\n  addSuccessToast(\n  t(\n  'Your query has been scheduled. To see details of your query, navigate to Saved queries')))).\n\n\n\n\n  catch(() =>\n  dispatch(addDangerToast(t('Your query could not be scheduled'))));\n\n}\n\nexport function estimateQueryCost(query) {\n  const { dbId, schema, sql, templateParams } = query;\n  const endpoint =\n  schema === null ?\n  `/superset/estimate_query_cost/${dbId}/` :\n  `/superset/estimate_query_cost/${dbId}/${schema}/`;\n  return (dispatch) =>\n  _Promise.all([\n  dispatch({ type: COST_ESTIMATE_STARTED, query }),\n  SupersetClient.post({\n    endpoint,\n    postPayload: {\n      sql,\n      templateParams: JSON.parse(templateParams || '{}') } }).\n\n\n  then(({ json }) =>\n  dispatch({ type: COST_ESTIMATE_RETURNED, query, json })).\n\n  catch((response) =>\n  getClientErrorObject(response).then(error => {\n    const message =\n    error.error ||\n    error.statusText ||\n    t('Failed at retrieving results');\n    return dispatch({\n      type: COST_ESTIMATE_FAILED,\n      query,\n      error: message });\n\n  }))]);\n\n\n}\n\nexport function startQuery(query) {\n  _Object$assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false });\n\n  return { type: START_QUERY, query };\n}\n\nexport function querySuccess(query, results) {\n  return function (dispatch) {\n    const sync =\n    !query.isDataPreview &&\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${results.query.sqlEditorId}`),\n      postPayload: { latest_query_id: query.id } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_SUCCESS, query, results })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while storing the latest query id in the backend. ' +\n    'Please contact your administrator if this problem persists.'))));\n\n\n\n\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    const sync =\n    !query.isDataPreview &&\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${query.sqlEditorId}`),\n      postPayload: { latest_query_id: query.id } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_FAILED, query, msg, link, errors })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while storing the latest query id in the backend. ' +\n    'Please contact your administrator if this problem persists.'))));\n\n\n\n\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit) {\n  return function (dispatch) {\n    dispatch(requestQueryResults(query));\n\n    return SupersetClient.get({\n      endpoint: `/superset/results/${query.resultsKey}/?rows=${displayLimit}`,\n      parseMethod: 'text' }).\n\n    then(({ text = '{}' }) => {\n      const bigIntJson = JSONbig.parse(text);\n      return dispatch(querySuccess(query, bigIntJson));\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then(error => {\n      const message =\n      error.error ||\n      error.statusText ||\n      t('Failed at retrieving results');\n\n      return dispatch(\n      queryFailed(query, message, error.link, error.errors));\n\n    }));\n\n  };\n}\n\nexport function runQuery(query) {\n  return function (dispatch) {\n    dispatch(startQuery(query));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true };\n\n\n    return SupersetClient.post({\n      endpoint: '/superset/sql_json/',\n      body: _JSON$stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'text' }).\n\n    then(({ text = '{}' }) => {\n      if (!query.runAsync) {\n        const bigIntJson = JSONbig.parse(text);\n        dispatch(querySuccess(query, bigIntJson));\n      }\n    }).\n    catch((response) =>\n    getClientErrorObject(response).then(error => {\n      let message = error.error || error.statusText || t('Unknown error');\n      if (_includesInstanceProperty(message).call(message, 'CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      dispatch(queryFailed(query, message, error.link, error.errors));\n    }));\n\n  };\n}\n\nexport function validateQuery(query) {\n  return function (dispatch) {\n    dispatch(startQueryValidation(query));\n\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      templateParams: query.templateParams,\n      validate_only: true };\n\n\n    return SupersetClient.post({\n      endpoint: `/superset/validate_sql_json/${window.location.search}`,\n      postPayload,\n      stringify: false }).\n\n    then(({ json }) => dispatch(queryValidationReturned(query, json))).\n    catch((response) =>\n    getClientErrorObject(response).then(error => {\n      let message = error.error || error.statusText || t('Unknown error');\n      if (_includesInstanceProperty(message).call(message, 'CSRF token')) {\n        message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n      }\n      dispatch(queryValidationFailed(query, message, error));\n    }));\n\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/superset/stop_query/',\n      postPayload: { client_id: query.id },\n      stringify: false }).\n\n    then(() => dispatch(stopQuery(query))).\n    then(() => dispatch(addSuccessToast(t('Query was stopped.')))).\n    catch(() =>\n    dispatch(\n    addDangerToast(`${t('Failed at stopping query. ')}'${query.id}'`)));\n\n\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } } }).\n\n  then(({ json }) => {\n    const newTable = {\n      ...table,\n      id: json.id,\n      queryEditorId };\n\n    return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n  }).\n  catch(() =>\n  dispatch(\n  addWarningToast(\n  t(\n  'Unable to migrate table schema state to backend. Superset will retry ' +\n  'later. Please contact your administrator if this problem persists.'))));\n\n\n\n\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId } }).\n\n  then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId })).\n  catch(() =>\n  dispatch(\n  addWarningToast(\n  t(\n  'Unable to migrate query state to backend. Superset will retry later. ' +\n  'Please contact your administrator if this problem persists.'))));\n\n\n\n\n}\n\nexport function migrateQueryEditorFromLocalStorage(\nqueryEditor,\ntables,\nqueries)\n{\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor } }).\n\n    then(({ json }) => {\n      const newQueryEditor = {\n        ...queryEditor,\n        id: json.id.toString() };\n\n      dispatch({\n        type: MIGRATE_QUERY_EDITOR,\n        oldQueryEditor: queryEditor,\n        newQueryEditor });\n\n      dispatch({\n        type: MIGRATE_TAB_HISTORY,\n        oldId: queryEditor.id,\n        newId: newQueryEditor.id });\n\n      return _Promise.all([\n      ..._mapInstanceProperty(tables).call(tables, (table) =>\n      migrateTable(table, newQueryEditor.id, dispatch)),\n\n      ..._mapInstanceProperty(queries).call(queries, (query) =>\n      migrateQuery(query.id, newQueryEditor.id, dispatch))]);\n\n\n    }).\n    catch(() =>\n    dispatch(\n    addWarningToast(\n    t(\n    'Unable to migrate query editor state to backend. Superset will retry ' +\n    'later. Please contact your administrator if this problem persists.'))));\n\n\n\n\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor } }) :\n\n    _Promise.resolve({ json: { id: shortid.generate() } });\n\n    return sync.\n    then(({ json }) => {\n      const newQueryEditor = {\n        ...queryEditor,\n        id: json.id.toString() };\n\n      return dispatch({\n        type: ADD_QUERY_EDITOR,\n        queryEditor: newQueryEditor });\n\n    }).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'Unable to add a new tab to the backend. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = _findInstanceProperty(queryEditors).call(queryEditors,\n    qe => qe.id === tabHistory[tabHistory.length - 1]);\n\n    const queryEditor = {\n      title: t('Copy of %s', sourceQueryEditor.title),\n      dbId: query.dbId ? query.dbId : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams };\n\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}/activate`) }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: SET_ACTIVE_QUERY_EDITOR, queryEditor })).\n    catch(response => {\n      if (response.status !== 404) {\n        return dispatch(\n        addDangerToast(\n        t(\n        'An error occurred while setting the active tab. Please contact ' +\n        'your administrator.')));\n\n\n\n      }\n      return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n    });\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {var _context;\n  const tables = _mapInstanceProperty(_context = _filterInstanceProperty(tableSchemas).call(tableSchemas,\n  tableSchema => tableSchema.description !== null)).call(_context,\n  tableSchema => {\n    const {\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      dataPreviewQueryId } =\n    tableSchema.description;\n    return {\n      dbId: tableSchema.database_id,\n      queryEditorId: tableSchema.tab_state_id.toString(),\n      schema: tableSchema.schema,\n      name: tableSchema.table,\n      expanded: tableSchema.expanded,\n      id: tableSchema.id,\n      dataPreviewQueryId,\n      columns,\n      selectStar,\n      primaryKey,\n      foreignKeys,\n      indexes,\n      isMetadataLoading: false,\n      isExtraMetadataLoading: false };\n\n  });\n  return { type: SET_TABLES, tables };\n}\n\nexport function switchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    if (\n    isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n    !queryEditor.loaded)\n    {\n      SupersetClient.get({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`) }).\n\n      then(({ json }) => {\n        const loadedQueryEditor = {\n          id: json.id.toString(),\n          loaded: true,\n          title: json.label,\n          sql: json.sql,\n          selectedText: null,\n          latestQueryId: json.latest_query ? json.latest_query.id : null,\n          autorun: json.autorun,\n          dbId: json.database_id,\n          templateParams: json.template_params,\n          schema: json.schema,\n          queryLimit: json.query_limit,\n          validationResult: {\n            id: null,\n            errors: [],\n            completed: false } };\n\n\n        dispatch(loadQueryEditor(loadedQueryEditor));\n        dispatch(setTables(json.table_schemas || []));\n        dispatch(setActiveQueryEditor(loadedQueryEditor));\n        if (json.latest_query && json.latest_query.resultsKey) {\n          dispatch(fetchQueryResults(json.latest_query, displayLimit));\n        }\n      }).\n      catch(response => {\n        if (response.status !== 404) {\n          return dispatch(\n          addDangerToast(t('An error occurred while fetching tab state')));\n\n        }\n        return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n      });\n    } else {\n      dispatch(setActiveQueryEditor(queryEditor));\n    }\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`) }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing tab. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(\n      `/tabstateview/${query.sqlEditorId}/query/${query.id}`) }) :\n\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_QUERY, query })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing query. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { database_id: dbId } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_EDITOR_SETDB, queryEditor, dbId })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab database ID. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { schema } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_SCHEMA, queryEditor, schema })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab schema. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSchemaOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_SCHEMA_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetTableOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_TABLE_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { autorun } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab autorun. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetTitle(queryEditor, title) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { label: title } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({ type: QUERY_EDITOR_SET_TITLE, queryEditor, title })).\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab title. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSql(queryEditor, sql) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { sql } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: QUERY_EDITOR_SET_SQL, queryEditor, sql })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while storing your query in the backend. To ' +\n    'avoid losing your changes, please save your query using the ' +\n    '\"Save Query\" button.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { query_limit: queryLimit } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_SET_QUERY_LIMIT,\n      queryEditor,\n      queryLimit })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab title. Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.put({\n      endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      postPayload: { template_params: templateParams } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() =>\n    dispatch({\n      type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n      queryEditor,\n      templateParams })).\n\n\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while setting the tab template parameters. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query) {\n  return { type: MERGE_TABLE, table, query };\n}\n\nfunction getTableMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n    `/api/v1/database/${query.dbId}/table/` +\n    `${encodeURIComponent(table.name)}/${encodeURIComponent(\n    table.schema)\n    }/`) }).\n\n\n  then(({ json }) => {\n    const dataPreviewQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: json.selectStar,\n      tableName: table.name,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      isDataPreview: true };\n\n    const newTable = {\n      ...table,\n      ...json,\n      expanded: true,\n      isMetadataLoading: false,\n      dataPreviewQueryId: dataPreviewQuery.id };\n\n    _Promise.all([\n    dispatch(mergeTable(newTable, dataPreviewQuery)), // Merge table to tables in state\n    dispatch(runQuery(dataPreviewQuery)) // Run query to get preview data for table\n    ]);\n    return newTable;\n  }).\n  catch(() =>\n  _Promise.all([\n  dispatch(\n  mergeTable({\n    ...table,\n    isMetadataLoading: false })),\n\n\n  dispatch(\n  addDangerToast(t('An error occurred while fetching table metadata')))]));\n\n\n\n}\n\nfunction getTableExtendedMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n    `/superset/extra_table_metadata/${query.dbId}/` +\n    `${encodeURIComponent(table.name)}/${encodeURIComponent(\n    table.schema)\n    }/`) }).\n\n\n  then(({ json }) => {\n    dispatch(\n    mergeTable({ ...table, ...json, isExtraMetadataLoading: false }));\n\n    return json;\n  }).\n  catch(() =>\n  _Promise.all([\n  dispatch(mergeTable({ ...table, isExtraMetadataLoading: false })),\n  dispatch(\n  addDangerToast(t('An error occurred while fetching table metadata')))]));\n\n\n\n}\n\nexport function addTable(query, tableName, schemaName) {\n  return function (dispatch) {\n    const table = {\n      dbId: query.dbId,\n      queryEditorId: query.id,\n      schema: schemaName,\n      name: tableName };\n\n    dispatch(\n    mergeTable({\n      ...table,\n      isMetadataLoading: true,\n      isExtraMetadataLoading: true,\n      expanded: false }));\n\n\n\n    return _Promise.all([\n    getTableMetadata(table, query, dispatch),\n    getTableExtendedMetadata(table, query, dispatch)]).\n    then(([newTable, json]) => {\n      const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n      SupersetClient.post({\n        endpoint: encodeURI('/tableschemaview/'),\n        postPayload: { table: { ...newTable, ...json } } }) :\n\n      _Promise.resolve({ json: { id: shortid.generate() } });\n\n      return sync.\n      then(({ json: resultJson }) =>\n      dispatch(mergeTable({ ...table, id: resultJson.id }))).\n\n      catch(() =>\n      dispatch(\n      addDangerToast(\n      t(\n      'An error occurred while fetching table metadata. ' +\n      'Please contact your administrator.'))));\n\n\n\n\n    });\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview };\n\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: true } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: EXPAND_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while expanding the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.post({\n      endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n      postPayload: { expanded: false } }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: COLLAPSE_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while collapsing the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function removeTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) ?\n    SupersetClient.delete({\n      endpoint: encodeURI(`/tableschemaview/${table.id}`) }) :\n\n    _Promise.resolve();\n\n    return sync.\n    then(() => dispatch({ type: REMOVE_TABLE, table })).\n    catch(() =>\n    dispatch(\n    addDangerToast(\n    t(\n    'An error occurred while removing the table schema. ' +\n    'Please contact your administrator.'))));\n\n\n\n\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent };\n\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/kv/${urlId}` }).\n    then(({ json }) =>\n    dispatch(\n    addQueryEditor({\n      title: json.title ? json.title : t('Shared query'),\n      dbId: json.dbId ? _parseInt(json.dbId, 10) : null,\n      schema: json.schema ? json.schema : null,\n      autorun: json.autorun ? json.autorun : false,\n      sql: json.sql ? json.sql : 'SELECT ...' }))).\n\n\n\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/savedqueryviewapi/api/get/${saveQueryId}` }).\n\n    then(({ json }) => {\n      const queryEditorProps = {\n        ...convertQueryToClient(json.result),\n        autorun: false };\n\n      return dispatch(addQueryEditor(queryEditorProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}` }).\n\n    then(({ json }) => {\n      const queryData = json.result;\n      const queryEditorProps = {\n        dbId: queryData.database.id,\n        schema: queryData.schema,\n        sql: queryData.sql,\n        title: `Copy of ${queryData.tab_name}`,\n        autorun: false };\n\n      return dispatch(addQueryEditor(queryEditorProps));\n    }).\n    catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/superset/fetch_datasource_metadata?datasourceKey=${datasourceKey}` }).\n\n    then(({ json }) =>\n    dispatch(\n    addQueryEditor({\n      title: `Query ${json.name}`,\n      dbId: json.database.id,\n      schema: json.schema,\n      autorun: sql !== undefined,\n      sql: sql || json.select_star }))).\n\n\n\n    catch(() =>\n    dispatch(addDangerToast(t(\"The datasource couldn't be loaded\"))));\n\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.table_id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/sqllab_viz/',\n      postPayload: { data: vizOptions } }).\n\n    then(({ json }) => {\n      dispatch(createDatasourceSuccess(json));\n\n      return _Promise.resolve(json);\n    }).\n    catch(() => {\n      dispatch(\n      createDatasourceFailed(\n      t('An error occurred while creating the data source')));\n\n\n\n      return _Promise.reject();\n    });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/get_or_create_table/',\n      postPayload: { data: vizOptions } }).\n\n    then(({ json }) => {\n      dispatch(createDatasourceSuccess(json));\n\n      return json;\n    }).\n    catch(() => {\n      const errorMsg = t('An error occurred while creating the data source');\n      dispatch(createDatasourceFailed(errorMsg));\n      return _Promise.reject(new Error(errorMsg));\n    });\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(RESET_STATE, \"RESET_STATE\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ADD_QUERY_EDITOR, \"ADD_QUERY_EDITOR\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(UPDATE_QUERY_EDITOR, \"UPDATE_QUERY_EDITOR\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SAVED, \"QUERY_EDITOR_SAVED\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLONE_QUERY_TO_NEW_TAB, \"CLONE_QUERY_TO_NEW_TAB\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY_EDITOR, \"REMOVE_QUERY_EDITOR\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MERGE_TABLE, \"MERGE_TABLE\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_TABLE, \"REMOVE_TABLE\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(END_QUERY, \"END_QUERY\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_QUERY, \"REMOVE_QUERY\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(EXPAND_TABLE, \"EXPAND_TABLE\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COLLAPSE_TABLE, \"COLLAPSE_TABLE\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SETDB, \"QUERY_EDITOR_SETDB\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SCHEMA, \"QUERY_EDITOR_SET_SCHEMA\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SCHEMA_OPTIONS, \"QUERY_EDITOR_SET_SCHEMA_OPTIONS\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TABLE_OPTIONS, \"QUERY_EDITOR_SET_TABLE_OPTIONS\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TITLE, \"QUERY_EDITOR_SET_TITLE\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_AUTORUN, \"QUERY_EDITOR_SET_AUTORUN\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SQL, \"QUERY_EDITOR_SET_SQL\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_QUERY_LIMIT, \"QUERY_EDITOR_SET_QUERY_LIMIT\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_TEMPLATE_PARAMS, \"QUERY_EDITOR_SET_TEMPLATE_PARAMS\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_SET_SELECTED_TEXT, \"QUERY_EDITOR_SET_SELECTED_TEXT\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_EDITOR_PERSIST_HEIGHT, \"QUERY_EDITOR_PERSIST_HEIGHT\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY_EDITOR, \"MIGRATE_QUERY_EDITOR\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TAB_HISTORY, \"MIGRATE_TAB_HISTORY\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_TABLE, \"MIGRATE_TABLE\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(MIGRATE_QUERY, \"MIGRATE_QUERY\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_DATABASES, \"SET_DATABASES\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_QUERY_EDITOR, \"SET_ACTIVE_QUERY_EDITOR\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(LOAD_QUERY_EDITOR, \"LOAD_QUERY_EDITOR\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_TABLES, \"SET_TABLES\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_ACTIVE_SOUTHPANE_TAB, \"SET_ACTIVE_SOUTHPANE_TAB\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REFRESH_QUERIES, \"REFRESH_QUERIES\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(SET_USER_OFFLINE, \"SET_USER_OFFLINE\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(RUN_QUERY, \"RUN_QUERY\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(START_QUERY, \"START_QUERY\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(STOP_QUERY, \"STOP_QUERY\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REQUEST_QUERY_RESULTS, \"REQUEST_QUERY_RESULTS\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_SUCCESS, \"QUERY_SUCCESS\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_FAILED, \"QUERY_FAILED\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CLEAR_QUERY_RESULTS, \"CLEAR_QUERY_RESULTS\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(REMOVE_DATA_PREVIEW, \"REMOVE_DATA_PREVIEW\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CHANGE_DATA_PREVIEW_ID, \"CHANGE_DATA_PREVIEW_ID\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(START_QUERY_VALIDATION, \"START_QUERY_VALIDATION\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_VALIDATION_RETURNED, \"QUERY_VALIDATION_RETURNED\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(QUERY_VALIDATION_FAILED, \"QUERY_VALIDATION_FAILED\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_STARTED, \"COST_ESTIMATE_STARTED\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_RETURNED, \"COST_ESTIMATE_RETURNED\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(COST_ESTIMATE_FAILED, \"COST_ESTIMATE_FAILED\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_STARTED, \"CREATE_DATASOURCE_STARTED\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_SUCCESS, \"CREATE_DATASOURCE_SUCCESS\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CREATE_DATASOURCE_FAILED, \"CREATE_DATASOURCE_FAILED\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addInfoToast, \"addInfoToast\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addSuccessToast, \"addSuccessToast\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addDangerToast, \"addDangerToast\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addWarningToast, \"addWarningToast\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(CtasEnum, \"CtasEnum\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(ERR_MSG_CANT_LOAD_QUERY, \"ERR_MSG_CANT_LOAD_QUERY\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryClientMapping, \"queryClientMapping\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryServerMapping, \"queryServerMapping\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fieldConverter, \"fieldConverter\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToServer, \"convertQueryToServer\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(convertQueryToClient, \"convertQueryToClient\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(resetState, \"resetState\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(startQueryValidation, \"startQueryValidation\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryValidationReturned, \"queryValidationReturned\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryValidationFailed, \"queryValidationFailed\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(saveQuery, \"saveQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateQueryEditor, \"updateQueryEditor\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(updateSavedQuery, \"updateSavedQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(scheduleQuery, \"scheduleQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(estimateQueryCost, \"estimateQueryCost\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(startQuery, \"startQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(querySuccess, \"querySuccess\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryFailed, \"queryFailed\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(stopQuery, \"stopQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(clearQueryResults, \"clearQueryResults\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeDataPreview, \"removeDataPreview\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(requestQueryResults, \"requestQueryResults\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(fetchQueryResults, \"fetchQueryResults\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(runQuery, \"runQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(validateQuery, \"validateQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(postStopQuery, \"postStopQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setDatabases, \"setDatabases\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateTable, \"migrateTable\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateQuery, \"migrateQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(migrateQueryEditorFromLocalStorage, \"migrateQueryEditorFromLocalStorage\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addQueryEditor, \"addQueryEditor\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(cloneQueryToNewTab, \"cloneQueryToNewTab\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveQueryEditor, \"setActiveQueryEditor\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(loadQueryEditor, \"loadQueryEditor\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setTables, \"setTables\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(switchQueryEditor, \"switchQueryEditor\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setActiveSouthPaneTab, \"setActiveSouthPaneTab\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQueryEditor, \"removeQueryEditor\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeQuery, \"removeQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetDb, \"queryEditorSetDb\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSchema, \"queryEditorSetSchema\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSchemaOptions, \"queryEditorSetSchemaOptions\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTableOptions, \"queryEditorSetTableOptions\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetAutorun, \"queryEditorSetAutorun\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTitle, \"queryEditorSetTitle\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSql, \"queryEditorSetSql\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetQueryLimit, \"queryEditorSetQueryLimit\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetTemplateParams, \"queryEditorSetTemplateParams\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(queryEditorSetSelectedText, \"queryEditorSetSelectedText\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(mergeTable, \"mergeTable\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(getTableMetadata, \"getTableMetadata\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(getTableExtendedMetadata, \"getTableExtendedMetadata\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(addTable, \"addTable\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(changeDataPreviewId, \"changeDataPreviewId\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(reFetchQueryResults, \"reFetchQueryResults\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(expandTable, \"expandTable\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(collapseTable, \"collapseTable\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(removeTable, \"removeTable\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(refreshQueries, \"refreshQueries\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(setUserOffline, \"setUserOffline\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(persistEditorHeight, \"persistEditorHeight\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popStoredQuery, \"popStoredQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popSavedQuery, \"popSavedQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popQuery, \"popQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(popDatasourceQuery, \"popDatasourceQuery\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceStarted, \"createDatasourceStarted\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceSuccess, \"createDatasourceSuccess\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasourceFailed, \"createDatasourceFailed\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createDatasource, \"createDatasource\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");reactHotLoader.register(createCtasDatasource, \"createCtasDatasource\", \"/app/superset-frontend/src/SqlLab/actions/sqlLab.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/SqlLab/actions/sqlLab.js"],"names":["shortid","JSONbig","t","SupersetClient","invert","mapKeys","isFeatureEnabled","FeatureFlag","now","addDangerToast","addDangerToastAction","addInfoToast","addInfoToastAction","addSuccessToast","addSuccessToastAction","addWarningToast","addWarningToastAction","getClientErrorObject","COMMON_ERR_MESSAGES","RESET_STATE","ADD_QUERY_EDITOR","UPDATE_QUERY_EDITOR","QUERY_EDITOR_SAVED","CLONE_QUERY_TO_NEW_TAB","REMOVE_QUERY_EDITOR","MERGE_TABLE","REMOVE_TABLE","END_QUERY","REMOVE_QUERY","EXPAND_TABLE","COLLAPSE_TABLE","QUERY_EDITOR_SETDB","QUERY_EDITOR_SET_SCHEMA","QUERY_EDITOR_SET_SCHEMA_OPTIONS","QUERY_EDITOR_SET_TABLE_OPTIONS","QUERY_EDITOR_SET_TITLE","QUERY_EDITOR_SET_AUTORUN","QUERY_EDITOR_SET_SQL","QUERY_EDITOR_SET_QUERY_LIMIT","QUERY_EDITOR_SET_TEMPLATE_PARAMS","QUERY_EDITOR_SET_SELECTED_TEXT","QUERY_EDITOR_PERSIST_HEIGHT","MIGRATE_QUERY_EDITOR","MIGRATE_TAB_HISTORY","MIGRATE_TABLE","MIGRATE_QUERY","SET_DATABASES","SET_ACTIVE_QUERY_EDITOR","LOAD_QUERY_EDITOR","SET_TABLES","SET_ACTIVE_SOUTHPANE_TAB","REFRESH_QUERIES","SET_USER_OFFLINE","RUN_QUERY","START_QUERY","STOP_QUERY","REQUEST_QUERY_RESULTS","QUERY_SUCCESS","QUERY_FAILED","CLEAR_QUERY_RESULTS","REMOVE_DATA_PREVIEW","CHANGE_DATA_PREVIEW_ID","START_QUERY_VALIDATION","QUERY_VALIDATION_RETURNED","QUERY_VALIDATION_FAILED","COST_ESTIMATE_STARTED","COST_ESTIMATE_RETURNED","COST_ESTIMATE_FAILED","CREATE_DATASOURCE_STARTED","CREATE_DATASOURCE_SUCCESS","CREATE_DATASOURCE_FAILED","CtasEnum","TABLE","VIEW","ERR_MSG_CANT_LOAD_QUERY","queryClientMapping","id","db_id","client_id","label","queryServerMapping","fieldConverter","mapping","obj","value","key","convertQueryToServer","convertQueryToClient","resetState","type","startQueryValidation","query","generate","queryValidationReturned","results","queryValidationFailed","message","error","saveQuery","dispatch","post","endpoint","postPayload","stringify","then","result","json","item","catch","updateQueryEditor","alterations","updateSavedQuery","put","remoteId","scheduleQuery","estimateQueryCost","dbId","schema","sql","templateParams","all","JSON","parse","response","statusText","startQuery","progress","startDttm","state","runAsync","cached","querySuccess","sync","isDataPreview","SQLLAB_BACKEND_PERSISTENCE","encodeURI","sqlEditorId","latest_query_id","resolve","queryFailed","msg","link","errors","stopQuery","clearQueryResults","removeDataPreview","table","requestQueryResults","fetchQueryResults","displayLimit","get","resultsKey","parseMethod","text","bigIntJson","runQuery","database_id","sql_editor_id","tab","tmp_table_name","tempTable","select_as_cta","ctas","ctas_method","queryLimit","expand_data","body","headers","SESSION_TIMED_OUT","validateQuery","validate_only","window","location","search","postStopQuery","setDatabases","databases","migrateTable","queryEditorId","newTable","oldTable","migrateQuery","queryId","migrateQueryEditorFromLocalStorage","queryEditor","tables","queries","newQueryEditor","toString","oldQueryEditor","oldId","newId","addQueryEditor","cloneQueryToNewTab","autorun","getState","queryEditors","tabHistory","sqlLab","sourceQueryEditor","qe","length","title","maxRow","setActiveQueryEditor","status","loadQueryEditor","setTables","tableSchemas","tableSchema","description","columns","selectStar","primaryKey","foreignKeys","indexes","dataPreviewQueryId","tab_state_id","name","expanded","isMetadataLoading","isExtraMetadataLoading","switchQueryEditor","loaded","loadedQueryEditor","selectedText","latestQueryId","latest_query","template_params","query_limit","validationResult","completed","table_schemas","setActiveSouthPaneTab","tabId","removeQueryEditor","delete","removeQuery","queryEditorSetDb","queryEditorSetSchema","queryEditorSetSchemaOptions","options","queryEditorSetTableOptions","queryEditorSetAutorun","queryEditorSetTitle","queryEditorSetSql","queryEditorSetQueryLimit","queryEditorSetTemplateParams","queryEditorSetSelectedText","mergeTable","getTableMetadata","encodeURIComponent","dataPreviewQuery","tableName","getTableExtendedMetadata","addTable","schemaName","resultJson","changeDataPreviewId","oldQueryId","newQuery","reFetchQueryResults","expandTable","collapseTable","removeTable","refreshQueries","alteredQueries","setUserOffline","offline","persistEditorHeight","northPercent","southPercent","popStoredQuery","urlId","popSavedQuery","saveQueryId","queryEditorProps","popQuery","queryData","database","tab_name","popDatasourceQuery","datasourceKey","undefined","select_star","createDatasourceStarted","createDatasourceSuccess","data","datasource","table_id","createDatasourceFailed","err","createDatasource","vizOptions","reject","createCtasDatasource","errorMsg","Error"],"mappings":"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GAEA3D,Y,iGACAE,e,oGACAJ,c,mGACAM,e,oGAEAwD,Q,6FAIPG,uB,4GAKAC,kB,uGAMAK,kB,uGAGAC,c,mGAGAK,oB,yGACAC,oB,yGAEUC,U,+FAIAE,oB,yGAOAG,uB,4GAIAE,qB,0GAIAG,S,8FAoBAW,iB,sGAIAE,gB,qGAcAG,a,kGAqBAC,iB,sGAmCAU,U,+FAWAM,Y,iGA0BAQ,W,gGA0BAI,S,8FAIAC,iB,sGAIAC,iB,sGAIAE,mB,wGAIAC,iB,sGA2BAO,Q,6FA4CAc,a,kGAiCAK,a,kGAiBAC,Y,iGAIPE,Y,iGAyBAI,Y,iGAkBOE,kC,uHA+CAS,c,mGAgCAC,kB,uGAqBAW,oB,yGA0BAE,e,oGAIAC,S,8FAgCAe,iB,sGAiDAW,qB,0GAIAE,iB,sGAsBAE,W,gGAwBAC,gB,qGAuBAC,oB,yGAyBAC,2B,gHAIAE,0B,+GAIAC,qB,0GAyBAC,mB,wGAyBAC,iB,sGAyBAC,wB,6GA6BAC,4B,iHA8BAC,0B,+GAIAC,U,+FAIPC,gB,qGAiDAI,wB,6GAyBOC,Q,6FA8CAG,mB,wGAIAG,mB,wGAmBAC,W,gGAwBAC,a,kGAwBAC,W,gGAuBAC,c,mGAIAE,c,mGAIAE,mB,wGASAG,c,mGAiBAE,a,kGAeAG,Q,6FAmBAI,kB,uGAqBAI,uB,4GAGAC,uB,4GAIAI,sB,2GAIAE,gB,qGAwBAG,oB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport shortid from 'shortid';\nimport JSONbig from 'json-bigint';\nimport { t, SupersetClient } from '@superset-ui/core';\nimport invert from 'lodash/invert';\nimport mapKeys from 'lodash/mapKeys';\nimport { isFeatureEnabled, FeatureFlag } from 'src/featureFlags';\n\nimport { now } from '../../modules/dates';\nimport {\n  addDangerToast as addDangerToastAction,\n  addInfoToast as addInfoToastAction,\n  addSuccessToast as addSuccessToastAction,\n  addWarningToast as addWarningToastAction,\n} from '../../messageToasts/actions/index';\nimport { getClientErrorObject } from '../../utils/getClientErrorObject';\nimport COMMON_ERR_MESSAGES from '../../utils/errorMessages';\n\nexport const RESET_STATE = 'RESET_STATE';\nexport const ADD_QUERY_EDITOR = 'ADD_QUERY_EDITOR';\nexport const UPDATE_QUERY_EDITOR = 'UPDATE_QUERY_EDITOR';\nexport const QUERY_EDITOR_SAVED = 'QUERY_EDITOR_SAVED';\nexport const CLONE_QUERY_TO_NEW_TAB = 'CLONE_QUERY_TO_NEW_TAB';\nexport const REMOVE_QUERY_EDITOR = 'REMOVE_QUERY_EDITOR';\nexport const MERGE_TABLE = 'MERGE_TABLE';\nexport const REMOVE_TABLE = 'REMOVE_TABLE';\nexport const END_QUERY = 'END_QUERY';\nexport const REMOVE_QUERY = 'REMOVE_QUERY';\nexport const EXPAND_TABLE = 'EXPAND_TABLE';\nexport const COLLAPSE_TABLE = 'COLLAPSE_TABLE';\nexport const QUERY_EDITOR_SETDB = 'QUERY_EDITOR_SETDB';\nexport const QUERY_EDITOR_SET_SCHEMA = 'QUERY_EDITOR_SET_SCHEMA';\nexport const QUERY_EDITOR_SET_SCHEMA_OPTIONS =\n  'QUERY_EDITOR_SET_SCHEMA_OPTIONS';\nexport const QUERY_EDITOR_SET_TABLE_OPTIONS = 'QUERY_EDITOR_SET_TABLE_OPTIONS';\nexport const QUERY_EDITOR_SET_TITLE = 'QUERY_EDITOR_SET_TITLE';\nexport const QUERY_EDITOR_SET_AUTORUN = 'QUERY_EDITOR_SET_AUTORUN';\nexport const QUERY_EDITOR_SET_SQL = 'QUERY_EDITOR_SET_SQL';\nexport const QUERY_EDITOR_SET_QUERY_LIMIT = 'QUERY_EDITOR_SET_QUERY_LIMIT';\nexport const QUERY_EDITOR_SET_TEMPLATE_PARAMS =\n  'QUERY_EDITOR_SET_TEMPLATE_PARAMS';\nexport const QUERY_EDITOR_SET_SELECTED_TEXT = 'QUERY_EDITOR_SET_SELECTED_TEXT';\nexport const QUERY_EDITOR_PERSIST_HEIGHT = 'QUERY_EDITOR_PERSIST_HEIGHT';\nexport const MIGRATE_QUERY_EDITOR = 'MIGRATE_QUERY_EDITOR';\nexport const MIGRATE_TAB_HISTORY = 'MIGRATE_TAB_HISTORY';\nexport const MIGRATE_TABLE = 'MIGRATE_TABLE';\nexport const MIGRATE_QUERY = 'MIGRATE_QUERY';\n\nexport const SET_DATABASES = 'SET_DATABASES';\nexport const SET_ACTIVE_QUERY_EDITOR = 'SET_ACTIVE_QUERY_EDITOR';\nexport const LOAD_QUERY_EDITOR = 'LOAD_QUERY_EDITOR';\nexport const SET_TABLES = 'SET_TABLES';\nexport const SET_ACTIVE_SOUTHPANE_TAB = 'SET_ACTIVE_SOUTHPANE_TAB';\nexport const REFRESH_QUERIES = 'REFRESH_QUERIES';\nexport const SET_USER_OFFLINE = 'SET_USER_OFFLINE';\nexport const RUN_QUERY = 'RUN_QUERY';\nexport const START_QUERY = 'START_QUERY';\nexport const STOP_QUERY = 'STOP_QUERY';\nexport const REQUEST_QUERY_RESULTS = 'REQUEST_QUERY_RESULTS';\nexport const QUERY_SUCCESS = 'QUERY_SUCCESS';\nexport const QUERY_FAILED = 'QUERY_FAILED';\nexport const CLEAR_QUERY_RESULTS = 'CLEAR_QUERY_RESULTS';\nexport const REMOVE_DATA_PREVIEW = 'REMOVE_DATA_PREVIEW';\nexport const CHANGE_DATA_PREVIEW_ID = 'CHANGE_DATA_PREVIEW_ID';\n\nexport const START_QUERY_VALIDATION = 'START_QUERY_VALIDATION';\nexport const QUERY_VALIDATION_RETURNED = 'QUERY_VALIDATION_RETURNED';\nexport const QUERY_VALIDATION_FAILED = 'QUERY_VALIDATION_FAILED';\nexport const COST_ESTIMATE_STARTED = 'COST_ESTIMATE_STARTED';\nexport const COST_ESTIMATE_RETURNED = 'COST_ESTIMATE_RETURNED';\nexport const COST_ESTIMATE_FAILED = 'COST_ESTIMATE_FAILED';\n\nexport const CREATE_DATASOURCE_STARTED = 'CREATE_DATASOURCE_STARTED';\nexport const CREATE_DATASOURCE_SUCCESS = 'CREATE_DATASOURCE_SUCCESS';\nexport const CREATE_DATASOURCE_FAILED = 'CREATE_DATASOURCE_FAILED';\n\nexport const addInfoToast = addInfoToastAction;\nexport const addSuccessToast = addSuccessToastAction;\nexport const addDangerToast = addDangerToastAction;\nexport const addWarningToast = addWarningToastAction;\n\nexport const CtasEnum = {\n  TABLE: 'TABLE',\n  VIEW: 'VIEW',\n};\nconst ERR_MSG_CANT_LOAD_QUERY = t(\"The query couldn't be loaded\");\n\n// a map of SavedQuery field names to the different names used client-side,\n// because for now making the names consistent is too complicated\n// so it might as well only happen in one place\nconst queryClientMapping = {\n  id: 'remoteId',\n  db_id: 'dbId',\n  client_id: 'id',\n  label: 'title',\n};\nconst queryServerMapping = invert(queryClientMapping);\n\n// uses a mapping like those above to convert object key names to another style\nconst fieldConverter = mapping => obj =>\n  mapKeys(obj, (value, key) => (key in mapping ? mapping[key] : key));\n\nconst convertQueryToServer = fieldConverter(queryServerMapping);\nconst convertQueryToClient = fieldConverter(queryClientMapping);\n\nexport function resetState() {\n  return { type: RESET_STATE };\n}\n\nexport function startQueryValidation(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n  });\n  return { type: START_QUERY_VALIDATION, query };\n}\n\nexport function queryValidationReturned(query, results) {\n  return { type: QUERY_VALIDATION_RETURNED, query, results };\n}\n\nexport function queryValidationFailed(query, message, error) {\n  return { type: QUERY_VALIDATION_FAILED, query, message, error };\n}\n\nexport function saveQuery(query) {\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/savedqueryviewapi/api/create',\n      postPayload: convertQueryToServer(query),\n      stringify: false,\n    })\n      .then(result => {\n        dispatch({\n          type: QUERY_EDITOR_SAVED,\n          query,\n          result: convertQueryToClient(result.json.item),\n        });\n        dispatch(addSuccessToast(t('Your query was saved')));\n      })\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be saved'))),\n      );\n}\n\nexport function updateQueryEditor(alterations) {\n  return { type: UPDATE_QUERY_EDITOR, alterations };\n}\n\nexport function updateSavedQuery(query) {\n  return dispatch =>\n    SupersetClient.put({\n      endpoint: `/savedqueryviewapi/api/update/${query.remoteId}`,\n      postPayload: convertQueryToServer(query),\n      stringify: false,\n    })\n      .then(() => dispatch(addSuccessToast(t('Your query was updated'))))\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be updated'))),\n      )\n      .then(() => dispatch(updateQueryEditor(query)));\n}\n\nexport function scheduleQuery(query) {\n  return dispatch =>\n    SupersetClient.post({\n      endpoint: '/savedqueryviewapi/api/create',\n      postPayload: query,\n      stringify: false,\n    })\n      .then(() =>\n        dispatch(\n          addSuccessToast(\n            t(\n              'Your query has been scheduled. To see details of your query, navigate to Saved queries',\n            ),\n          ),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t('Your query could not be scheduled'))),\n      );\n}\n\nexport function estimateQueryCost(query) {\n  const { dbId, schema, sql, templateParams } = query;\n  const endpoint =\n    schema === null\n      ? `/superset/estimate_query_cost/${dbId}/`\n      : `/superset/estimate_query_cost/${dbId}/${schema}/`;\n  return dispatch =>\n    Promise.all([\n      dispatch({ type: COST_ESTIMATE_STARTED, query }),\n      SupersetClient.post({\n        endpoint,\n        postPayload: {\n          sql,\n          templateParams: JSON.parse(templateParams || '{}'),\n        },\n      })\n        .then(({ json }) =>\n          dispatch({ type: COST_ESTIMATE_RETURNED, query, json }),\n        )\n        .catch(response =>\n          getClientErrorObject(response).then(error => {\n            const message =\n              error.error ||\n              error.statusText ||\n              t('Failed at retrieving results');\n            return dispatch({\n              type: COST_ESTIMATE_FAILED,\n              query,\n              error: message,\n            });\n          }),\n        ),\n    ]);\n}\n\nexport function startQuery(query) {\n  Object.assign(query, {\n    id: query.id ? query.id : shortid.generate(),\n    progress: 0,\n    startDttm: now(),\n    state: query.runAsync ? 'pending' : 'running',\n    cached: false,\n  });\n  return { type: START_QUERY, query };\n}\n\nexport function querySuccess(query, results) {\n  return function (dispatch) {\n    const sync =\n      !query.isDataPreview &&\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.put({\n            endpoint: encodeURI(`/tabstateview/${results.query.sqlEditorId}`),\n            postPayload: { latest_query_id: query.id },\n          })\n        : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_SUCCESS, query, results }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing the latest query id in the backend. ' +\n                'Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryFailed(query, msg, link, errors) {\n  return function (dispatch) {\n    const sync =\n      !query.isDataPreview &&\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.put({\n            endpoint: encodeURI(`/tabstateview/${query.sqlEditorId}`),\n            postPayload: { latest_query_id: query.id },\n          })\n        : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_FAILED, query, msg, link, errors }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing the latest query id in the backend. ' +\n                'Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function stopQuery(query) {\n  return { type: STOP_QUERY, query };\n}\n\nexport function clearQueryResults(query) {\n  return { type: CLEAR_QUERY_RESULTS, query };\n}\n\nexport function removeDataPreview(table) {\n  return { type: REMOVE_DATA_PREVIEW, table };\n}\n\nexport function requestQueryResults(query) {\n  return { type: REQUEST_QUERY_RESULTS, query };\n}\n\nexport function fetchQueryResults(query, displayLimit) {\n  return function (dispatch) {\n    dispatch(requestQueryResults(query));\n\n    return SupersetClient.get({\n      endpoint: `/superset/results/${query.resultsKey}/?rows=${displayLimit}`,\n      parseMethod: 'text',\n    })\n      .then(({ text = '{}' }) => {\n        const bigIntJson = JSONbig.parse(text);\n        return dispatch(querySuccess(query, bigIntJson));\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          const message =\n            error.error ||\n            error.statusText ||\n            t('Failed at retrieving results');\n\n          return dispatch(\n            queryFailed(query, message, error.link, error.errors),\n          );\n        }),\n      );\n  };\n}\n\nexport function runQuery(query) {\n  return function (dispatch) {\n    dispatch(startQuery(query));\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      runAsync: query.runAsync,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      tab: query.tab,\n      tmp_table_name: query.tempTable,\n      select_as_cta: query.ctas,\n      ctas_method: query.ctas_method,\n      templateParams: query.templateParams,\n      queryLimit: query.queryLimit,\n      expand_data: true,\n    };\n\n    return SupersetClient.post({\n      endpoint: '/superset/sql_json/',\n      body: JSON.stringify(postPayload),\n      headers: { 'Content-Type': 'application/json' },\n      parseMethod: 'text',\n    })\n      .then(({ text = '{}' }) => {\n        if (!query.runAsync) {\n          const bigIntJson = JSONbig.parse(text);\n          dispatch(querySuccess(query, bigIntJson));\n        }\n      })\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          let message = error.error || error.statusText || t('Unknown error');\n          if (message.includes('CSRF token')) {\n            message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n          }\n          dispatch(queryFailed(query, message, error.link, error.errors));\n        }),\n      );\n  };\n}\n\nexport function validateQuery(query) {\n  return function (dispatch) {\n    dispatch(startQueryValidation(query));\n\n    const postPayload = {\n      client_id: query.id,\n      database_id: query.dbId,\n      json: true,\n      schema: query.schema,\n      sql: query.sql,\n      sql_editor_id: query.sqlEditorId,\n      templateParams: query.templateParams,\n      validate_only: true,\n    };\n\n    return SupersetClient.post({\n      endpoint: `/superset/validate_sql_json/${window.location.search}`,\n      postPayload,\n      stringify: false,\n    })\n      .then(({ json }) => dispatch(queryValidationReturned(query, json)))\n      .catch(response =>\n        getClientErrorObject(response).then(error => {\n          let message = error.error || error.statusText || t('Unknown error');\n          if (message.includes('CSRF token')) {\n            message = t(COMMON_ERR_MESSAGES.SESSION_TIMED_OUT);\n          }\n          dispatch(queryValidationFailed(query, message, error));\n        }),\n      );\n  };\n}\n\nexport function postStopQuery(query) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/superset/stop_query/',\n      postPayload: { client_id: query.id },\n      stringify: false,\n    })\n      .then(() => dispatch(stopQuery(query)))\n      .then(() => dispatch(addSuccessToast(t('Query was stopped.'))))\n      .catch(() =>\n        dispatch(\n          addDangerToast(`${t('Failed at stopping query. ')}'${query.id}'`),\n        ),\n      );\n  };\n}\n\nexport function setDatabases(databases) {\n  return { type: SET_DATABASES, databases };\n}\n\nfunction migrateTable(table, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI('/tableschemaview/'),\n    postPayload: { table: { ...table, queryEditorId } },\n  })\n    .then(({ json }) => {\n      const newTable = {\n        ...table,\n        id: json.id,\n        queryEditorId,\n      };\n      return dispatch({ type: MIGRATE_TABLE, oldTable: table, newTable });\n    })\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate table schema state to backend. Superset will retry ' +\n              'later. Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\nfunction migrateQuery(queryId, queryEditorId, dispatch) {\n  return SupersetClient.post({\n    endpoint: encodeURI(`/tabstateview/${queryEditorId}/migrate_query`),\n    postPayload: { queryId },\n  })\n    .then(() => dispatch({ type: MIGRATE_QUERY, queryId, queryEditorId }))\n    .catch(() =>\n      dispatch(\n        addWarningToast(\n          t(\n            'Unable to migrate query state to backend. Superset will retry later. ' +\n              'Please contact your administrator if this problem persists.',\n          ),\n        ),\n      ),\n    );\n}\n\nexport function migrateQueryEditorFromLocalStorage(\n  queryEditor,\n  tables,\n  queries,\n) {\n  return function (dispatch) {\n    return SupersetClient.post({\n      endpoint: '/tabstateview/',\n      postPayload: { queryEditor },\n    })\n      .then(({ json }) => {\n        const newQueryEditor = {\n          ...queryEditor,\n          id: json.id.toString(),\n        };\n        dispatch({\n          type: MIGRATE_QUERY_EDITOR,\n          oldQueryEditor: queryEditor,\n          newQueryEditor,\n        });\n        dispatch({\n          type: MIGRATE_TAB_HISTORY,\n          oldId: queryEditor.id,\n          newId: newQueryEditor.id,\n        });\n        return Promise.all([\n          ...tables.map(table =>\n            migrateTable(table, newQueryEditor.id, dispatch),\n          ),\n          ...queries.map(query =>\n            migrateQuery(query.id, newQueryEditor.id, dispatch),\n          ),\n        ]);\n      })\n      .catch(() =>\n        dispatch(\n          addWarningToast(\n            t(\n              'Unable to migrate query editor state to backend. Superset will retry ' +\n                'later. Please contact your administrator if this problem persists.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function addQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: '/tabstateview/',\n          postPayload: { queryEditor },\n        })\n      : Promise.resolve({ json: { id: shortid.generate() } });\n\n    return sync\n      .then(({ json }) => {\n        const newQueryEditor = {\n          ...queryEditor,\n          id: json.id.toString(),\n        };\n        return dispatch({\n          type: ADD_QUERY_EDITOR,\n          queryEditor: newQueryEditor,\n        });\n      })\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'Unable to add a new tab to the backend. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function cloneQueryToNewTab(query, autorun) {\n  return function (dispatch, getState) {\n    const state = getState();\n    const { queryEditors, tabHistory } = state.sqlLab;\n    const sourceQueryEditor = queryEditors.find(\n      qe => qe.id === tabHistory[tabHistory.length - 1],\n    );\n    const queryEditor = {\n      title: t('Copy of %s', sourceQueryEditor.title),\n      dbId: query.dbId ? query.dbId : null,\n      schema: query.schema ? query.schema : null,\n      autorun,\n      sql: query.sql,\n      queryLimit: sourceQueryEditor.queryLimit,\n      maxRow: sourceQueryEditor.maxRow,\n      templateParams: sourceQueryEditor.templateParams,\n    };\n    return dispatch(addQueryEditor(queryEditor));\n  };\n}\n\nexport function setActiveQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}/activate`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: SET_ACTIVE_QUERY_EDITOR, queryEditor }))\n      .catch(response => {\n        if (response.status !== 404) {\n          return dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while setting the active tab. Please contact ' +\n                  'your administrator.',\n              ),\n            ),\n          );\n        }\n        return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n      });\n  };\n}\n\nexport function loadQueryEditor(queryEditor) {\n  return { type: LOAD_QUERY_EDITOR, queryEditor };\n}\n\nexport function setTables(tableSchemas) {\n  const tables = tableSchemas\n    .filter(tableSchema => tableSchema.description !== null)\n    .map(tableSchema => {\n      const {\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        dataPreviewQueryId,\n      } = tableSchema.description;\n      return {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        dataPreviewQueryId,\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        isMetadataLoading: false,\n        isExtraMetadataLoading: false,\n      };\n    });\n  return { type: SET_TABLES, tables };\n}\n\nexport function switchQueryEditor(queryEditor, displayLimit) {\n  return function (dispatch) {\n    if (\n      isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE) &&\n      !queryEditor.loaded\n    ) {\n      SupersetClient.get({\n        endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n      })\n        .then(({ json }) => {\n          const loadedQueryEditor = {\n            id: json.id.toString(),\n            loaded: true,\n            title: json.label,\n            sql: json.sql,\n            selectedText: null,\n            latestQueryId: json.latest_query ? json.latest_query.id : null,\n            autorun: json.autorun,\n            dbId: json.database_id,\n            templateParams: json.template_params,\n            schema: json.schema,\n            queryLimit: json.query_limit,\n            validationResult: {\n              id: null,\n              errors: [],\n              completed: false,\n            },\n          };\n          dispatch(loadQueryEditor(loadedQueryEditor));\n          dispatch(setTables(json.table_schemas || []));\n          dispatch(setActiveQueryEditor(loadedQueryEditor));\n          if (json.latest_query && json.latest_query.resultsKey) {\n            dispatch(fetchQueryResults(json.latest_query, displayLimit));\n          }\n        })\n        .catch(response => {\n          if (response.status !== 404) {\n            return dispatch(\n              addDangerToast(t('An error occurred while fetching tab state')),\n            );\n          }\n          return dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor });\n        });\n    } else {\n      dispatch(setActiveQueryEditor(queryEditor));\n    }\n  };\n}\n\nexport function setActiveSouthPaneTab(tabId) {\n  return { type: SET_ACTIVE_SOUTHPANE_TAB, tabId };\n}\n\nexport function removeQueryEditor(queryEditor) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_QUERY_EDITOR, queryEditor }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing tab. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeQuery(query) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(\n            `/tabstateview/${query.sqlEditorId}/query/${query.id}`,\n          ),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_QUERY, query }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing query. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetDb(queryEditor, dbId) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { database_id: dbId },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_EDITOR_SETDB, queryEditor, dbId }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab database ID. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetSchema(queryEditor, schema) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { schema },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_SCHEMA, queryEditor, schema }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab schema. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetSchemaOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_SCHEMA_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetTableOptions(queryEditor, options) {\n  return { type: QUERY_EDITOR_SET_TABLE_OPTIONS, queryEditor, options };\n}\n\nexport function queryEditorSetAutorun(queryEditor, autorun) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { autorun },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_AUTORUN, queryEditor, autorun }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab autorun. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetTitle(queryEditor, title) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { label: title },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({ type: QUERY_EDITOR_SET_TITLE, queryEditor, title }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab title. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetSql(queryEditor, sql) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { sql },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: QUERY_EDITOR_SET_SQL, queryEditor, sql }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while storing your query in the backend. To ' +\n                'avoid losing your changes, please save your query using the ' +\n                '\"Save Query\" button.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetQueryLimit(queryEditor, queryLimit) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { query_limit: queryLimit },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_SET_QUERY_LIMIT,\n          queryEditor,\n          queryLimit,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab title. Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetTemplateParams(queryEditor, templateParams) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.put({\n          endpoint: encodeURI(`/tabstateview/${queryEditor.id}`),\n          postPayload: { template_params: templateParams },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() =>\n        dispatch({\n          type: QUERY_EDITOR_SET_TEMPLATE_PARAMS,\n          queryEditor,\n          templateParams,\n        }),\n      )\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while setting the tab template parameters. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function queryEditorSetSelectedText(queryEditor, sql) {\n  return { type: QUERY_EDITOR_SET_SELECTED_TEXT, queryEditor, sql };\n}\n\nexport function mergeTable(table, query) {\n  return { type: MERGE_TABLE, table, query };\n}\n\nfunction getTableMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n      `/api/v1/database/${query.dbId}/table/` +\n        `${encodeURIComponent(table.name)}/${encodeURIComponent(\n          table.schema,\n        )}/`,\n    ),\n  })\n    .then(({ json }) => {\n      const dataPreviewQuery = {\n        id: shortid.generate(),\n        dbId: query.dbId,\n        sql: json.selectStar,\n        tableName: table.name,\n        sqlEditorId: null,\n        tab: '',\n        runAsync: false,\n        ctas: false,\n        isDataPreview: true,\n      };\n      const newTable = {\n        ...table,\n        ...json,\n        expanded: true,\n        isMetadataLoading: false,\n        dataPreviewQueryId: dataPreviewQuery.id,\n      };\n      Promise.all([\n        dispatch(mergeTable(newTable, dataPreviewQuery)), // Merge table to tables in state\n        dispatch(runQuery(dataPreviewQuery)), // Run query to get preview data for table\n      ]);\n      return newTable;\n    })\n    .catch(() =>\n      Promise.all([\n        dispatch(\n          mergeTable({\n            ...table,\n            isMetadataLoading: false,\n          }),\n        ),\n        dispatch(\n          addDangerToast(t('An error occurred while fetching table metadata')),\n        ),\n      ]),\n    );\n}\n\nfunction getTableExtendedMetadata(table, query, dispatch) {\n  return SupersetClient.get({\n    endpoint: encodeURI(\n      `/superset/extra_table_metadata/${query.dbId}/` +\n        `${encodeURIComponent(table.name)}/${encodeURIComponent(\n          table.schema,\n        )}/`,\n    ),\n  })\n    .then(({ json }) => {\n      dispatch(\n        mergeTable({ ...table, ...json, isExtraMetadataLoading: false }),\n      );\n      return json;\n    })\n    .catch(() =>\n      Promise.all([\n        dispatch(mergeTable({ ...table, isExtraMetadataLoading: false })),\n        dispatch(\n          addDangerToast(t('An error occurred while fetching table metadata')),\n        ),\n      ]),\n    );\n}\n\nexport function addTable(query, tableName, schemaName) {\n  return function (dispatch) {\n    const table = {\n      dbId: query.dbId,\n      queryEditorId: query.id,\n      schema: schemaName,\n      name: tableName,\n    };\n    dispatch(\n      mergeTable({\n        ...table,\n        isMetadataLoading: true,\n        isExtraMetadataLoading: true,\n        expanded: false,\n      }),\n    );\n\n    return Promise.all([\n      getTableMetadata(table, query, dispatch),\n      getTableExtendedMetadata(table, query, dispatch),\n    ]).then(([newTable, json]) => {\n      const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n        ? SupersetClient.post({\n            endpoint: encodeURI('/tableschemaview/'),\n            postPayload: { table: { ...newTable, ...json } },\n          })\n        : Promise.resolve({ json: { id: shortid.generate() } });\n\n      return sync\n        .then(({ json: resultJson }) =>\n          dispatch(mergeTable({ ...table, id: resultJson.id })),\n        )\n        .catch(() =>\n          dispatch(\n            addDangerToast(\n              t(\n                'An error occurred while fetching table metadata. ' +\n                  'Please contact your administrator.',\n              ),\n            ),\n          ),\n        );\n    });\n  };\n}\n\nexport function changeDataPreviewId(oldQueryId, newQuery) {\n  return { type: CHANGE_DATA_PREVIEW_ID, oldQueryId, newQuery };\n}\n\nexport function reFetchQueryResults(query) {\n  return function (dispatch) {\n    const newQuery = {\n      id: shortid.generate(),\n      dbId: query.dbId,\n      sql: query.sql,\n      tableName: query.tableName,\n      sqlEditorId: null,\n      tab: '',\n      runAsync: false,\n      ctas: false,\n      queryLimit: query.queryLimit,\n      isDataPreview: query.isDataPreview,\n    };\n    dispatch(runQuery(newQuery));\n    dispatch(changeDataPreviewId(query.id, newQuery));\n  };\n}\n\nexport function expandTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: true },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: EXPAND_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while expanding the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function collapseTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.post({\n          endpoint: encodeURI(`/tableschemaview/${table.id}/expanded`),\n          postPayload: { expanded: false },\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: COLLAPSE_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while collapsing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function removeTable(table) {\n  return function (dispatch) {\n    const sync = isFeatureEnabled(FeatureFlag.SQLLAB_BACKEND_PERSISTENCE)\n      ? SupersetClient.delete({\n          endpoint: encodeURI(`/tableschemaview/${table.id}`),\n        })\n      : Promise.resolve();\n\n    return sync\n      .then(() => dispatch({ type: REMOVE_TABLE, table }))\n      .catch(() =>\n        dispatch(\n          addDangerToast(\n            t(\n              'An error occurred while removing the table schema. ' +\n                'Please contact your administrator.',\n            ),\n          ),\n        ),\n      );\n  };\n}\n\nexport function refreshQueries(alteredQueries) {\n  return { type: REFRESH_QUERIES, alteredQueries };\n}\n\nexport function setUserOffline(offline) {\n  return { type: SET_USER_OFFLINE, offline };\n}\n\nexport function persistEditorHeight(queryEditor, northPercent, southPercent) {\n  return {\n    type: QUERY_EDITOR_PERSIST_HEIGHT,\n    queryEditor,\n    northPercent,\n    southPercent,\n  };\n}\n\nexport function popStoredQuery(urlId) {\n  return function (dispatch) {\n    return SupersetClient.get({ endpoint: `/kv/${urlId}` })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            title: json.title ? json.title : t('Shared query'),\n            dbId: json.dbId ? parseInt(json.dbId, 10) : null,\n            schema: json.schema ? json.schema : null,\n            autorun: json.autorun ? json.autorun : false,\n            sql: json.sql ? json.sql : 'SELECT ...',\n          }),\n        ),\n      )\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popSavedQuery(saveQueryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/savedqueryviewapi/api/get/${saveQueryId}`,\n    })\n      .then(({ json }) => {\n        const queryEditorProps = {\n          ...convertQueryToClient(json.result),\n          autorun: false,\n        };\n        return dispatch(addQueryEditor(queryEditorProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popQuery(queryId) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/api/v1/query/${queryId}`,\n    })\n      .then(({ json }) => {\n        const queryData = json.result;\n        const queryEditorProps = {\n          dbId: queryData.database.id,\n          schema: queryData.schema,\n          sql: queryData.sql,\n          title: `Copy of ${queryData.tab_name}`,\n          autorun: false,\n        };\n        return dispatch(addQueryEditor(queryEditorProps));\n      })\n      .catch(() => dispatch(addDangerToast(ERR_MSG_CANT_LOAD_QUERY)));\n  };\n}\nexport function popDatasourceQuery(datasourceKey, sql) {\n  return function (dispatch) {\n    return SupersetClient.get({\n      endpoint: `/superset/fetch_datasource_metadata?datasourceKey=${datasourceKey}`,\n    })\n      .then(({ json }) =>\n        dispatch(\n          addQueryEditor({\n            title: `Query ${json.name}`,\n            dbId: json.database.id,\n            schema: json.schema,\n            autorun: sql !== undefined,\n            sql: sql || json.select_star,\n          }),\n        ),\n      )\n      .catch(() =>\n        dispatch(addDangerToast(t(\"The datasource couldn't be loaded\"))),\n      );\n  };\n}\nexport function createDatasourceStarted() {\n  return { type: CREATE_DATASOURCE_STARTED };\n}\nexport function createDatasourceSuccess(data) {\n  const datasource = `${data.table_id}__table`;\n  return { type: CREATE_DATASOURCE_SUCCESS, datasource };\n}\nexport function createDatasourceFailed(err) {\n  return { type: CREATE_DATASOURCE_FAILED, err };\n}\n\nexport function createDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/sqllab_viz/',\n      postPayload: { data: vizOptions },\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json));\n\n        return Promise.resolve(json);\n      })\n      .catch(() => {\n        dispatch(\n          createDatasourceFailed(\n            t('An error occurred while creating the data source'),\n          ),\n        );\n\n        return Promise.reject();\n      });\n  };\n}\n\nexport function createCtasDatasource(vizOptions) {\n  return dispatch => {\n    dispatch(createDatasourceStarted());\n    return SupersetClient.post({\n      endpoint: '/superset/get_or_create_table/',\n      postPayload: { data: vizOptions },\n    })\n      .then(({ json }) => {\n        dispatch(createDatasourceSuccess(json));\n\n        return json;\n      })\n      .catch(() => {\n        const errorMsg = t('An error occurred while creating the data source');\n        dispatch(createDatasourceFailed(errorMsg));\n        return Promise.reject(new Error(errorMsg));\n      });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}