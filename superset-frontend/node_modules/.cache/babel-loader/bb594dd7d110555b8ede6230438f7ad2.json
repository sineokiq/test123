{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\nimport Icon from 'src/components/Icon';\nimport DetailsPanelPopover from './DetailsPanel';\nimport { Pill } from './Styles';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst FiltersBadge = ({ appliedIndicators, unsetIndicators, incompatibleIndicators, onHighlightFilterSource }) => {\n  if (!appliedIndicators.length &&\n  !incompatibleIndicators.length &&\n  !unsetIndicators.length) {\n    return null;\n  }\n  const isInactive = !appliedIndicators.length && !incompatibleIndicators.length;\n  return ___EmotionJSX(DetailsPanelPopover, { appliedIndicators: appliedIndicators, unsetIndicators: unsetIndicators, incompatibleIndicators: incompatibleIndicators, onHighlightFilterSource: onHighlightFilterSource },\n  ___EmotionJSX(Pill, { className: cx('filter-counts', !!incompatibleIndicators.length && 'has-incompatible-filters', isInactive && 'filters-inactive') },\n  ___EmotionJSX(Icon, { name: \"filter\" }),\n  !isInactive && ___EmotionJSX(\"span\", { \"data-test\": \"applied-filter-count\" },\n  appliedIndicators.length),\n\n  incompatibleIndicators.length ? ___EmotionJSX(React.Fragment, null,\n  ' ',\n  ___EmotionJSX(Icon, { name: \"alert-solid\" }),\n  ___EmotionJSX(\"span\", { \"data-test\": \"incompatible-filter-count\" },\n  incompatibleIndicators.length)) :\n\n  null));\n\n\n};const _default =\nFiltersBadge;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(FiltersBadge, \"FiltersBadge\", \"/app/superset-frontend/src/dashboard/components/FiltersBadge/index.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/FiltersBadge/index.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/FiltersBadge/index.tsx"],"names":[],"mappings":"wSAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,EAAP,MAAe,YAAf;AACA,OAAO,IAAP,MAAiB,qBAAjB;AACA,OAAO,mBAAP,MAAgC,gBAAhC;AACA,SAAS,IAAT,QAAqB,UAArB,C;AAUA,MAAM,YAAY,GAAG,CAAC,EACpB,iBADoB,EAEpB,eAFoB,EAGpB,sBAHoB,EAIpB,uBAJoB,EAAD,KAKG;AACtB,MACE,CAAC,iBAAiB,CAAC,MAAnB;AACA,GAAC,sBAAsB,CAAC,MADxB;AAEA,GAAC,eAAe,CAAC,MAHnB,EAIE;AACA,WAAO,IAAP;AACD;AAED,QAAM,UAAU,GACd,CAAC,iBAAiB,CAAC,MAAnB,IAA6B,CAAC,sBAAsB,CAAC,MADvD;AAGA,SACE,cAAC,mBAAD,IACE,iBAAiB,EAAE,iBADrB,EAEE,eAAe,EAAE,eAFnB,EAGE,sBAAsB,EAAE,sBAH1B,EAIE,uBAAuB,EAAE,uBAJ3B;AAME,gBAAC,IAAD,IACE,SAAS,EAAE,EAAE,CACX,eADW,EAEX,CAAC,CAAC,sBAAsB,CAAC,MAAzB,IAAmC,0BAFxB,EAGX,UAAU,IAAI,kBAHH,CADf;AAOE,gBAAC,IAAD,IAAM,IAAI,EAAC,QAAX,GAPF;AAQG,GAAC,UAAD,IACC,wBAAM,aAAU,sBAAhB;AACG,EAAA,iBAAiB,CAAC,MADrB,CATJ;;AAaG,EAAA,sBAAsB,CAAC,MAAvB,GACC;AACG,KADH;AAEE,gBAAC,IAAD,IAAM,IAAI,EAAC,aAAX,GAFF;AAGE,0BAAM,aAAU,2BAAhB;AACG,EAAA,sBAAsB,CAAC,MAD1B,CAHF,CADD;;AAQG,MArBN,CANF,CADF;;;AAgCD,CAjDD,C;AAmDe,Y,CAAf,wB,iLAnDM,Y","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport cx from 'classnames';\nimport Icon from 'src/components/Icon';\nimport DetailsPanelPopover from './DetailsPanel';\nimport { Pill } from './Styles';\nimport { Indicator } from './selectors';\n\nexport interface FiltersBadgeProps {\n  appliedIndicators: Indicator[];\n  unsetIndicators: Indicator[];\n  incompatibleIndicators: Indicator[];\n  onHighlightFilterSource: (path: string[]) => void;\n}\n\nconst FiltersBadge = ({\n  appliedIndicators,\n  unsetIndicators,\n  incompatibleIndicators,\n  onHighlightFilterSource,\n}: FiltersBadgeProps) => {\n  if (\n    !appliedIndicators.length &&\n    !incompatibleIndicators.length &&\n    !unsetIndicators.length\n  ) {\n    return null;\n  }\n\n  const isInactive =\n    !appliedIndicators.length && !incompatibleIndicators.length;\n\n  return (\n    <DetailsPanelPopover\n      appliedIndicators={appliedIndicators}\n      unsetIndicators={unsetIndicators}\n      incompatibleIndicators={incompatibleIndicators}\n      onHighlightFilterSource={onHighlightFilterSource}\n    >\n      <Pill\n        className={cx(\n          'filter-counts',\n          !!incompatibleIndicators.length && 'has-incompatible-filters',\n          isInactive && 'filters-inactive',\n        )}\n      >\n        <Icon name=\"filter\" />\n        {!isInactive && (\n          <span data-test=\"applied-filter-count\">\n            {appliedIndicators.length}\n          </span>\n        )}\n        {incompatibleIndicators.length ? (\n          <>\n            {' '}\n            <Icon name=\"alert-solid\" />\n            <span data-test=\"incompatible-filter-count\">\n              {incompatibleIndicators.length}\n            </span>\n          </>\n        ) : null}\n      </Pill>\n    </DetailsPanelPopover>\n  );\n};\n\nexport default FiltersBadge;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}