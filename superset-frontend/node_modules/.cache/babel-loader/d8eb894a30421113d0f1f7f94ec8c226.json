{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport { sections } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\nconst { enableEmptyFilter, fetchPredicate, inverseSelection, multiSelect, showSearch } = DEFAULT_FORM_DATA;\nconst config = {\n  controlPanelSections: [\n  // @ts-ignore\n  sections.legacyRegularTime,\n  {\n    label: t('Query'),\n    expanded: true,\n    controlSetRows: [\n    ['groupby'],\n    ['metrics'],\n    ['adhoc_filters'],\n    [\n    {\n      name: 'multiSelect',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Multiple select'),\n        default: multiSelect,\n        description: t('Allow selecting multiple values') } }],\n\n\n\n    [\n    {\n      name: 'enableEmptyFilter',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Enable empty filter'),\n        default: enableEmptyFilter,\n        description: t('When selection is empty, should an always false filter event be emitted') } }],\n\n\n\n    [\n    {\n      name: 'inverseSelection',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Inverse selection'),\n        default: inverseSelection,\n        description: t('Exclude selected values') } }],\n\n\n\n    [\n    {\n      name: 'showSearch',\n      config: {\n        type: 'CheckboxControl',\n        label: t('Search field'),\n        default: showSearch,\n        description: t('Allow typing search terms') } }],\n\n\n\n    [\n    {\n      name: 'fetchPredicate',\n      config: {\n        type: 'TextControl',\n        label: t('Fetch predicate'),\n        default: fetchPredicate,\n        description: t('Predicate applied when fetching distinct value to populate the filter control component.') } },\n\n\n    null],\n\n    ['row_limit', null]] }],\n\n\n\n  controlOverrides: {\n    groupby: {\n      multi: false,\n      validators: [validateNonEmpty] } } };const _default =\n\n\n\nconfig;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(enableEmptyFilter, \"enableEmptyFilter\", \"/app/superset-frontend/src/filters/components/Select/controlPanel.ts\");reactHotLoader.register(fetchPredicate, \"fetchPredicate\", \"/app/superset-frontend/src/filters/components/Select/controlPanel.ts\");reactHotLoader.register(inverseSelection, \"inverseSelection\", \"/app/superset-frontend/src/filters/components/Select/controlPanel.ts\");reactHotLoader.register(multiSelect, \"multiSelect\", \"/app/superset-frontend/src/filters/components/Select/controlPanel.ts\");reactHotLoader.register(showSearch, \"showSearch\", \"/app/superset-frontend/src/filters/components/Select/controlPanel.ts\");reactHotLoader.register(config, \"config\", \"/app/superset-frontend/src/filters/components/Select/controlPanel.ts\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/filters/components/Select/controlPanel.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/filters/components/Select/controlPanel.ts"],"names":[],"mappings":"wSAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SAAS,CAAT,EAAY,gBAAZ,QAAoC,mBAApC;AACA,SAA6B,QAA7B,QAA6C,6BAA7C;AACA,SAAS,iBAAT,QAAkC,SAAlC;AAEA,MAAM,EACJ,iBADI,EAEJ,cAFI,EAGJ,gBAHI,EAIJ,WAJI,EAKJ,UALI,KAMF,iBANJ;AAQA,MAAM,MAAM,GAAuB;AACjC,EAAA,oBAAoB,EAAE;AACpB;AACA,EAAA,QAAQ,CAAC,iBAFW;AAGpB;AACE,IAAA,KAAK,EAAE,CAAC,CAAC,OAAD,CADV;AAEE,IAAA,QAAQ,EAAE,IAFZ;AAGE,IAAA,cAAc,EAAE;AACd,KAAC,SAAD,CADc;AAEd,KAAC,SAAD,CAFc;AAGd,KAAC,eAAD,CAHc;AAId;AACE;AACE,MAAA,IAAI,EAAE,aADR;AAEE,MAAA,MAAM,EAAE;AACN,QAAA,IAAI,EAAE,iBADA;AAEN,QAAA,KAAK,EAAE,CAAC,CAAC,iBAAD,CAFF;AAGN,QAAA,OAAO,EAAE,WAHH;AAIN,QAAA,WAAW,EAAE,CAAC,CAAC,iCAAD,CAJR,EAFV,EADF,CAJc;;;;AAed;AACE;AACE,MAAA,IAAI,EAAE,mBADR;AAEE,MAAA,MAAM,EAAE;AACN,QAAA,IAAI,EAAE,iBADA;AAEN,QAAA,KAAK,EAAE,CAAC,CAAC,qBAAD,CAFF;AAGN,QAAA,OAAO,EAAE,iBAHH;AAIN,QAAA,WAAW,EAAE,CAAC,CACZ,yEADY,CAJR,EAFV,EADF,CAfc;;;;AA4Bd;AACE;AACE,MAAA,IAAI,EAAE,kBADR;AAEE,MAAA,MAAM,EAAE;AACN,QAAA,IAAI,EAAE,iBADA;AAEN,QAAA,KAAK,EAAE,CAAC,CAAC,mBAAD,CAFF;AAGN,QAAA,OAAO,EAAE,gBAHH;AAIN,QAAA,WAAW,EAAE,CAAC,CAAC,yBAAD,CAJR,EAFV,EADF,CA5Bc;;;;AAuCd;AACE;AACE,MAAA,IAAI,EAAE,YADR;AAEE,MAAA,MAAM,EAAE;AACN,QAAA,IAAI,EAAE,iBADA;AAEN,QAAA,KAAK,EAAE,CAAC,CAAC,cAAD,CAFF;AAGN,QAAA,OAAO,EAAE,UAHH;AAIN,QAAA,WAAW,EAAE,CAAC,CAAC,2BAAD,CAJR,EAFV,EADF,CAvCc;;;;AAkDd;AACE;AACE,MAAA,IAAI,EAAE,gBADR;AAEE,MAAA,MAAM,EAAE;AACN,QAAA,IAAI,EAAE,aADA;AAEN,QAAA,KAAK,EAAE,CAAC,CAAC,iBAAD,CAFF;AAGN,QAAA,OAAO,EAAE,cAHH;AAIN,QAAA,WAAW,EAAE,CAAC,CACZ,0FADY,CAJR,EAFV,EADF;;;AAYE,QAZF,CAlDc;;AAgEd,KAAC,WAAD,EAAc,IAAd,CAhEc,CAHlB,EAHoB,CADW;;;;AA2EjC,EAAA,gBAAgB,EAAE;AAChB,IAAA,OAAO,EAAE;AACP,MAAA,KAAK,EAAE,KADA;AAEP,MAAA,UAAU,EAAE,CAAC,gBAAD,CAFL,EADO,EA3Ee,EAAnC,C;;;;AAmFe,M,CAAf,wB,iLA1FE,iB,uHACA,c,oHACA,gB,sHACA,W,iHACA,U,gHAGI,M","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t, validateNonEmpty } from '@superset-ui/core';\nimport { ControlPanelConfig, sections } from '@superset-ui/chart-controls';\nimport { DEFAULT_FORM_DATA } from './types';\n\nconst {\n  enableEmptyFilter,\n  fetchPredicate,\n  inverseSelection,\n  multiSelect,\n  showSearch,\n} = DEFAULT_FORM_DATA;\n\nconst config: ControlPanelConfig = {\n  controlPanelSections: [\n    // @ts-ignore\n    sections.legacyRegularTime,\n    {\n      label: t('Query'),\n      expanded: true,\n      controlSetRows: [\n        ['groupby'],\n        ['metrics'],\n        ['adhoc_filters'],\n        [\n          {\n            name: 'multiSelect',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Multiple select'),\n              default: multiSelect,\n              description: t('Allow selecting multiple values'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'enableEmptyFilter',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Enable empty filter'),\n              default: enableEmptyFilter,\n              description: t(\n                'When selection is empty, should an always false filter event be emitted',\n              ),\n            },\n          },\n        ],\n        [\n          {\n            name: 'inverseSelection',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Inverse selection'),\n              default: inverseSelection,\n              description: t('Exclude selected values'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'showSearch',\n            config: {\n              type: 'CheckboxControl',\n              label: t('Search field'),\n              default: showSearch,\n              description: t('Allow typing search terms'),\n            },\n          },\n        ],\n        [\n          {\n            name: 'fetchPredicate',\n            config: {\n              type: 'TextControl',\n              label: t('Fetch predicate'),\n              default: fetchPredicate,\n              description: t(\n                'Predicate applied when fetching distinct value to populate the filter control component.',\n              ),\n            },\n          },\n          null,\n        ],\n        ['row_limit', null],\n      ],\n    },\n  ],\n  controlOverrides: {\n    groupby: {\n      multi: false,\n      validators: [validateNonEmpty],\n    },\n  },\n};\n\nexport default config;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}