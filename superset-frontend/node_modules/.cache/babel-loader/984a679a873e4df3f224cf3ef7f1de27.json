{"ast":null,"code":"import \"core-js/modules/es.promise.finally.js\";import _setTimeout from \"@babel/runtime-corejs3/core-js-stable/set-timeout\";import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\nimport { Tooltip } from 'src/common/components/Tooltip';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport copyTextToClipboard from 'src/utils/copy';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst propTypes = {\n  copyNode: PropTypes.node,\n  getText: PropTypes.func,\n  onCopyEnd: PropTypes.func,\n  shouldShowText: PropTypes.bool,\n  text: PropTypes.string,\n  wrapped: PropTypes.bool,\n  tooltipText: PropTypes.string,\n  addDangerToast: PropTypes.func.isRequired };\n\n\nconst defaultProps = {\n  copyNode: ___EmotionJSX(\"span\", null, \"Copy\"),\n  onCopyEnd: () => {},\n  shouldShowText: true,\n  wrapped: true,\n  tooltipText: t('Copy to clipboard') };\n\n\nclass CopyToClipboard extends React.Component {\n  constructor(props) {var _context, _context2, _context3, _context4;\n    super(props);\n    this.state = {\n      tooltipText: this.props.tooltipText };\n\n\n    // bindings\n    this.copyToClipboard = _bindInstanceProperty(_context = this.copyToClipboard).call(_context, this);\n    this.resetTooltipText = _bindInstanceProperty(_context2 = this.resetTooltipText).call(_context2, this);\n    this.onMouseOut = _bindInstanceProperty(_context3 = this.onMouseOut).call(_context3, this);\n    this.onClick = _bindInstanceProperty(_context4 = this.onClick).call(_context4, this);\n  }\n\n  onMouseOut() {\n    // delay to avoid flash of text change on tooltip\n    _setTimeout(this.resetTooltipText, 200);\n  }\n\n  onClick() {\n    if (this.props.getText) {\n      this.props.getText(d => {\n        this.copyToClipboard(d);\n      });\n    } else {\n      this.copyToClipboard(this.props.text);\n    }\n  }\n\n  getDecoratedCopyNode() {\n    return /*#__PURE__*/React.cloneElement(this.props.copyNode, {\n      style: { cursor: 'pointer' },\n      onClick: this.onClick,\n      onMouseOut: this.onMouseOut });\n\n  }\n\n  resetTooltipText() {\n    this.setState({ tooltipText: this.props.tooltipText });\n  }\n\n  copyToClipboard(textToCopy) {\n    copyTextToClipboard(textToCopy).\n    then(() => {\n      this.setState({ tooltipText: t('Copied!') });\n    }).\n    catch(() => {\n      this.props.addDangerToast(\n      t(\n      'Sorry, your browser does not support copying. Use Ctrl / Cmd + C!'));\n\n\n    }).\n    finally(() => {\n      this.props.onCopyEnd();\n    });\n  }\n\n  renderNotWrapped() {\n    return (\n      ___EmotionJSX(Tooltip, {\n        id: \"copy-to-clipboard-tooltip\",\n        placement: \"top\",\n        style: { cursor: 'pointer' },\n        title: this.state.tooltipText,\n        trigger: ['hover'],\n        onClick: this.onClick,\n        onMouseOut: this.onMouseOut },\n\n      this.getDecoratedCopyNode()));\n\n\n  }\n\n  renderLink() {\n    return (\n      ___EmotionJSX(\"span\", null,\n      this.props.shouldShowText && this.props.text &&\n      ___EmotionJSX(\"span\", { className: \"m-r-5\", \"data-test\": \"short-url\" },\n      this.props.text),\n\n\n      ___EmotionJSX(Tooltip, {\n        id: \"copy-to-clipboard-tooltip\",\n        placement: \"top\",\n        title: this.state.tooltipText,\n        trigger: ['hover'] },\n\n      this.getDecoratedCopyNode())));\n\n\n\n  }\n\n  render() {\n    const { wrapped } = this.props;\n    if (!wrapped) {\n      return this.renderNotWrapped();\n    }\n    return this.renderLink();\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}const _default =\nwithToasts(CopyToClipboard);export default _default;\n\nCopyToClipboard.propTypes = propTypes;\nCopyToClipboard.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/components/CopyToClipboard.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/components/CopyToClipboard.jsx\");reactHotLoader.register(CopyToClipboard, \"CopyToClipboard\", \"/app/superset-frontend/src/components/CopyToClipboard.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/components/CopyToClipboard.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/components/CopyToClipboard.jsx"],"names":["React","PropTypes","t","Tooltip","withToasts","copyTextToClipboard","propTypes","copyNode","node","getText","func","onCopyEnd","shouldShowText","bool","text","string","wrapped","tooltipText","addDangerToast","isRequired","defaultProps","CopyToClipboard","Component","constructor","props","state","copyToClipboard","resetTooltipText","onMouseOut","onClick","d","getDecoratedCopyNode","cloneElement","style","cursor","setState","textToCopy","then","catch","finally","renderNotWrapped","renderLink","render"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { t } from '@superset-ui/core';\nimport { Tooltip } from 'src/common/components/Tooltip';\nimport withToasts from 'src/messageToasts/enhancers/withToasts';\nimport copyTextToClipboard from 'src/utils/copy';\n\nconst propTypes = {\n  copyNode: PropTypes.node,\n  getText: PropTypes.func,\n  onCopyEnd: PropTypes.func,\n  shouldShowText: PropTypes.bool,\n  text: PropTypes.string,\n  wrapped: PropTypes.bool,\n  tooltipText: PropTypes.string,\n  addDangerToast: PropTypes.func.isRequired,\n};\n\nconst defaultProps = {\n  copyNode: <span>Copy</span>,\n  onCopyEnd: () => {},\n  shouldShowText: true,\n  wrapped: true,\n  tooltipText: t('Copy to clipboard'),\n};\n\nclass CopyToClipboard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tooltipText: this.props.tooltipText,\n    };\n\n    // bindings\n    this.copyToClipboard = this.copyToClipboard.bind(this);\n    this.resetTooltipText = this.resetTooltipText.bind(this);\n    this.onMouseOut = this.onMouseOut.bind(this);\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onMouseOut() {\n    // delay to avoid flash of text change on tooltip\n    setTimeout(this.resetTooltipText, 200);\n  }\n\n  onClick() {\n    if (this.props.getText) {\n      this.props.getText(d => {\n        this.copyToClipboard(d);\n      });\n    } else {\n      this.copyToClipboard(this.props.text);\n    }\n  }\n\n  getDecoratedCopyNode() {\n    return React.cloneElement(this.props.copyNode, {\n      style: { cursor: 'pointer' },\n      onClick: this.onClick,\n      onMouseOut: this.onMouseOut,\n    });\n  }\n\n  resetTooltipText() {\n    this.setState({ tooltipText: this.props.tooltipText });\n  }\n\n  copyToClipboard(textToCopy) {\n    copyTextToClipboard(textToCopy)\n      .then(() => {\n        this.setState({ tooltipText: t('Copied!') });\n      })\n      .catch(() => {\n        this.props.addDangerToast(\n          t(\n            'Sorry, your browser does not support copying. Use Ctrl / Cmd + C!',\n          ),\n        );\n      })\n      .finally(() => {\n        this.props.onCopyEnd();\n      });\n  }\n\n  renderNotWrapped() {\n    return (\n      <Tooltip\n        id=\"copy-to-clipboard-tooltip\"\n        placement=\"top\"\n        style={{ cursor: 'pointer' }}\n        title={this.state.tooltipText}\n        trigger={['hover']}\n        onClick={this.onClick}\n        onMouseOut={this.onMouseOut}\n      >\n        {this.getDecoratedCopyNode()}\n      </Tooltip>\n    );\n  }\n\n  renderLink() {\n    return (\n      <span>\n        {this.props.shouldShowText && this.props.text && (\n          <span className=\"m-r-5\" data-test=\"short-url\">\n            {this.props.text}\n          </span>\n        )}\n        <Tooltip\n          id=\"copy-to-clipboard-tooltip\"\n          placement=\"top\"\n          title={this.state.tooltipText}\n          trigger={['hover']}\n        >\n          {this.getDecoratedCopyNode()}\n        </Tooltip>\n      </span>\n    );\n  }\n\n  render() {\n    const { wrapped } = this.props;\n    if (!wrapped) {\n      return this.renderNotWrapped();\n    }\n    return this.renderLink();\n  }\n}\n\nexport default withToasts(CopyToClipboard);\n\nCopyToClipboard.propTypes = propTypes;\nCopyToClipboard.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}