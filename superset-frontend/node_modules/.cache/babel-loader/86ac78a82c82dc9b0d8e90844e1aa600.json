{"ast":null,"code":"import _bindInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/bind\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Panel } from 'react-bootstrap';\n\nimport Label from 'src/components/Label';\nimport TextControl from './TextControl';\nimport MetricsControl from './MetricControl/MetricsControl';\nimport ControlHeader from '../ControlHeader';\nimport PopoverSection from '../../../components/PopoverSection';import { jsx as ___EmotionJSX } from \"@emotion/core\";\n\nconst controlTypes = {\n  fixed: 'fix',\n  metric: 'metric' };\n\n\nconst propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.object,\n  isFloat: PropTypes.bool,\n  datasource: PropTypes.object.isRequired,\n  default: PropTypes.shape({\n    type: PropTypes.oneOf(['fix', 'metric']),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]) }) };\n\n\n\nconst defaultProps = {\n  onChange: () => {},\n  default: { type: controlTypes.fixed, value: 5 } };\n\n\nexport default class FixedOrMetricControl extends React.Component {\n  constructor(props) {var _context, _context2, _context3, _context4, _context5;\n    super(props);\n    this.onChange = _bindInstanceProperty(_context = this.onChange).call(_context, this);\n    this.setType = _bindInstanceProperty(_context2 = this.setType).call(_context2, this);\n    this.setFixedValue = _bindInstanceProperty(_context3 = this.setFixedValue).call(_context3, this);\n    this.setMetric = _bindInstanceProperty(_context4 = this.setMetric).call(_context4, this);\n    this.toggle = _bindInstanceProperty(_context5 = this.toggle).call(_context5, this);\n    const type =\n    (props.value ? props.value.type : props.default.type) ||\n    controlTypes.fixed;\n    const value =\n    (props.value ? props.value.value : props.default.value) || '100';\n    this.state = {\n      type,\n      fixedValue: type === controlTypes.fixed ? value : '',\n      metricValue: type === controlTypes.metric ? value : null };\n\n  }\n\n  onChange() {\n    this.props.onChange({\n      type: this.state.type,\n      value:\n      this.state.type === controlTypes.fixed ?\n      this.state.fixedValue :\n      this.state.metricValue });\n\n  }\n\n  setType(type) {\n    this.setState({ type }, this.onChange);\n  }\n\n  setFixedValue(fixedValue) {\n    this.setState({ fixedValue }, this.onChange);\n  }\n\n  setMetric(metricValue) {\n    this.setState({ metricValue }, this.onChange);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      expanded: !prevState.expanded }));\n\n  }\n\n  render() {\n    const value = this.props.value || this.props.default;\n    const type = value.type || controlTypes.fixed;\n    const columns = this.props.datasource ?\n    this.props.datasource.columns :\n    null;\n    const metrics = this.props.datasource ?\n    this.props.datasource.metrics :\n    null;\n    return (\n      ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ControlHeader, this.props),\n      ___EmotionJSX(Label, { onClick: this.toggle },\n      this.state.type === controlTypes.fixed &&\n      ___EmotionJSX(\"span\", null, this.state.fixedValue),\n\n      this.state.type === controlTypes.metric &&\n      ___EmotionJSX(\"span\", null,\n      ___EmotionJSX(\"span\", { style: { fontWeight: 'normal' } }, \"metric: \"),\n      ___EmotionJSX(\"strong\", null,\n      this.state.metricValue ? this.state.metricValue.label : null))),\n\n\n\n\n      ___EmotionJSX(Panel, {\n        className: \"panel-spreaded\",\n        collapsible: true,\n        expanded: this.state.expanded,\n        onToggle: this.toggle },\n\n      ___EmotionJSX(Panel.Collapse, null,\n      ___EmotionJSX(Panel.Body, null,\n      ___EmotionJSX(\"div\", { className: \"well\" },\n      ___EmotionJSX(PopoverSection, {\n        title: \"Fixed\",\n        isSelected: type === controlTypes.fixed,\n        onSelect: () => {\n          this.setType(controlTypes.fixed);\n        } },\n\n      ___EmotionJSX(TextControl, {\n        isFloat: true,\n        onChange: this.setFixedValue,\n        onFocus: () => {\n          this.setType(controlTypes.fixed);\n        },\n        value: this.state.fixedValue })),\n\n\n      ___EmotionJSX(PopoverSection, {\n        title: \"Based on a metric\",\n        isSelected: type === controlTypes.metric,\n        onSelect: () => {\n          this.setType(controlTypes.metric);\n        } },\n\n      ___EmotionJSX(MetricsControl, {\n        name: \"metric\",\n        columns: columns,\n        savedMetrics: metrics,\n        multi: false,\n        onFocus: () => {\n          this.setType(controlTypes.metric);\n        },\n        onChange: this.setMetric,\n        value: this.state.metricValue }))))))));\n\n\n\n\n\n\n\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}}\nFixedOrMetricControl.propTypes = propTypes;\nFixedOrMetricControl.defaultProps = defaultProps;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(controlTypes, \"controlTypes\", \"/app/superset-frontend/src/explore/components/controls/FixedOrMetricControl.jsx\");reactHotLoader.register(propTypes, \"propTypes\", \"/app/superset-frontend/src/explore/components/controls/FixedOrMetricControl.jsx\");reactHotLoader.register(defaultProps, \"defaultProps\", \"/app/superset-frontend/src/explore/components/controls/FixedOrMetricControl.jsx\");reactHotLoader.register(FixedOrMetricControl, \"FixedOrMetricControl\", \"/app/superset-frontend/src/explore/components/controls/FixedOrMetricControl.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/FixedOrMetricControl.jsx"],"names":["React","PropTypes","Panel","Label","TextControl","MetricsControl","ControlHeader","PopoverSection","controlTypes","fixed","metric","propTypes","onChange","func","value","object","isFloat","bool","datasource","isRequired","default","shape","type","oneOf","oneOfType","string","number","defaultProps","FixedOrMetricControl","Component","constructor","props","setType","setFixedValue","setMetric","toggle","state","fixedValue","metricValue","setState","prevState","expanded","render","columns","metrics","fontWeight","label"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Panel } from 'react-bootstrap';\n\nimport Label from 'src/components/Label';\nimport TextControl from './TextControl';\nimport MetricsControl from './MetricControl/MetricsControl';\nimport ControlHeader from '../ControlHeader';\nimport PopoverSection from '../../../components/PopoverSection';\n\nconst controlTypes = {\n  fixed: 'fix',\n  metric: 'metric',\n};\n\nconst propTypes = {\n  onChange: PropTypes.func,\n  value: PropTypes.object,\n  isFloat: PropTypes.bool,\n  datasource: PropTypes.object.isRequired,\n  default: PropTypes.shape({\n    type: PropTypes.oneOf(['fix', 'metric']),\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  }),\n};\n\nconst defaultProps = {\n  onChange: () => {},\n  default: { type: controlTypes.fixed, value: 5 },\n};\n\nexport default class FixedOrMetricControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.setType = this.setType.bind(this);\n    this.setFixedValue = this.setFixedValue.bind(this);\n    this.setMetric = this.setMetric.bind(this);\n    this.toggle = this.toggle.bind(this);\n    const type =\n      (props.value ? props.value.type : props.default.type) ||\n      controlTypes.fixed;\n    const value =\n      (props.value ? props.value.value : props.default.value) || '100';\n    this.state = {\n      type,\n      fixedValue: type === controlTypes.fixed ? value : '',\n      metricValue: type === controlTypes.metric ? value : null,\n    };\n  }\n\n  onChange() {\n    this.props.onChange({\n      type: this.state.type,\n      value:\n        this.state.type === controlTypes.fixed\n          ? this.state.fixedValue\n          : this.state.metricValue,\n    });\n  }\n\n  setType(type) {\n    this.setState({ type }, this.onChange);\n  }\n\n  setFixedValue(fixedValue) {\n    this.setState({ fixedValue }, this.onChange);\n  }\n\n  setMetric(metricValue) {\n    this.setState({ metricValue }, this.onChange);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      expanded: !prevState.expanded,\n    }));\n  }\n\n  render() {\n    const value = this.props.value || this.props.default;\n    const type = value.type || controlTypes.fixed;\n    const columns = this.props.datasource\n      ? this.props.datasource.columns\n      : null;\n    const metrics = this.props.datasource\n      ? this.props.datasource.metrics\n      : null;\n    return (\n      <div>\n        <ControlHeader {...this.props} />\n        <Label onClick={this.toggle}>\n          {this.state.type === controlTypes.fixed && (\n            <span>{this.state.fixedValue}</span>\n          )}\n          {this.state.type === controlTypes.metric && (\n            <span>\n              <span style={{ fontWeight: 'normal' }}>metric: </span>\n              <strong>\n                {this.state.metricValue ? this.state.metricValue.label : null}\n              </strong>\n            </span>\n          )}\n        </Label>\n        <Panel\n          className=\"panel-spreaded\"\n          collapsible\n          expanded={this.state.expanded}\n          onToggle={this.toggle}\n        >\n          <Panel.Collapse>\n            <Panel.Body>\n              <div className=\"well\">\n                <PopoverSection\n                  title=\"Fixed\"\n                  isSelected={type === controlTypes.fixed}\n                  onSelect={() => {\n                    this.setType(controlTypes.fixed);\n                  }}\n                >\n                  <TextControl\n                    isFloat\n                    onChange={this.setFixedValue}\n                    onFocus={() => {\n                      this.setType(controlTypes.fixed);\n                    }}\n                    value={this.state.fixedValue}\n                  />\n                </PopoverSection>\n                <PopoverSection\n                  title=\"Based on a metric\"\n                  isSelected={type === controlTypes.metric}\n                  onSelect={() => {\n                    this.setType(controlTypes.metric);\n                  }}\n                >\n                  <MetricsControl\n                    name=\"metric\"\n                    columns={columns}\n                    savedMetrics={metrics}\n                    multi={false}\n                    onFocus={() => {\n                      this.setType(controlTypes.metric);\n                    }}\n                    onChange={this.setMetric}\n                    value={this.state.metricValue}\n                  />\n                </PopoverSection>\n              </div>\n            </Panel.Body>\n          </Panel.Collapse>\n        </Panel>\n      </div>\n    );\n  }\n}\n\nFixedOrMetricControl.propTypes = propTypes;\nFixedOrMetricControl.defaultProps = defaultProps;\n"]},"metadata":{},"sourceType":"module"}