{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { Tree } from 'src/common/components';\nimport { useFilterScopeTree } from './state';\nimport { DASHBOARD_ROOT_ID } from '../../util/constants';\nimport { findFilterScope } from './utils';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst ScopingTree = ({ setFilterScope }) => {\n  const [expandedKeys, setExpandedKeys] = useState([\n  DASHBOARD_ROOT_ID]);\n\n  const { treeData, layout } = useFilterScopeTree();\n  const [autoExpandParent, setAutoExpandParent] = useState(true);\n  const [checkedKeys, setCheckedKeys] = useState([]);\n  const onExpand = expandedKeys => {\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n  const onCheck = checkedKeys => {\n    setCheckedKeys(checkedKeys);\n    setFilterScope(findFilterScope(checkedKeys, layout));\n  };\n  return ___EmotionJSX(Tree, { checkable: true, selectable: false, onExpand: onExpand, expandedKeys: expandedKeys, autoExpandParent: autoExpandParent, onCheck: onCheck, checkedKeys: checkedKeys, treeData: treeData });\n};__signature__(ScopingTree, \"useState{[expandedKeys, setExpandedKeys]([\\n        DASHBOARD_ROOT_ID,\\n    ])}\\nuseFilterScopeTree{{ treeData, layout }}\\nuseState{[autoExpandParent, setAutoExpandParent](true)}\\nuseState{[checkedKeys, setCheckedKeys]([])}\", () => [useFilterScopeTree]);const _default =\nScopingTree;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(ScopingTree, \"ScopingTree\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/ScopingTree.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/ScopingTree.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/ScopingTree.tsx"],"names":[],"mappings":"iWAAA;;;;;;;;;;;;;;;;;AAiBG;AAEH,OAAO,KAAP,IAAoB,QAApB,QAAoC,OAApC;AACA,SAAS,IAAT,QAAqB,uBAArB;AACA,SAAS,kBAAT,QAAmC,SAAnC;AACA,SAAS,iBAAT,QAAkC,sBAAlC;AACA,SAAS,eAAT,QAAgC,SAAhC,C;AAMA,MAAM,WAAW,GAAyB,CAAC,EAAE,cAAF,EAAD,KAAuB;AAC/D,QAAM,CAAC,YAAD,EAAe,eAAf,IAAkC,QAAQ,CAAW;AACzD,EAAA,iBADyD,CAAX,CAAhD;;AAIA,QAAM,EAAE,QAAF,EAAY,MAAZ,KAAuB,kBAAkB,EAA/C;AAEA,QAAM,CAAC,gBAAD,EAAmB,mBAAnB,IAA0C,QAAQ,CAAU,IAAV,CAAxD;AACA,QAAM,CAAC,WAAD,EAAc,cAAd,IAAgC,QAAQ,CAAW,EAAX,CAA9C;AAEA,QAAM,QAAQ,GAAI,YAAD,IAA2B;AAC1C,IAAA,eAAe,CAAC,YAAD,CAAf;AACA,IAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,GAHD;AAKA,QAAM,OAAO,GAAI,WAAD,IAA0B;AACxC,IAAA,cAAc,CAAC,WAAD,CAAd;AACA,IAAA,cAAc,CAAC,eAAe,CAAC,WAAD,EAAc,MAAd,CAAhB,CAAd;AACD,GAHD;AAKA,SACE,cAAC,IAAD,IACE,SAAS,MADX,EAEE,UAAU,EAAE,KAFd,EAGE,QAAQ,EAAE,QAHZ,EAIE,YAAY,EAAE,YAJhB,EAKE,gBAAgB,EAAE,gBALpB,EAME,OAAO,EAAE,OANX,EAOE,WAAW,EAAE,WAPf,EAQE,QAAQ,EAAE,QARZ,GADF;AAYD,CAhCD,C,cAAM,W,4OAKyB,kB;AA6BhB,W,CAAf,wB,iLAlCM,W","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { FC, useState } from 'react';\nimport { Tree } from 'src/common/components';\nimport { useFilterScopeTree } from './state';\nimport { DASHBOARD_ROOT_ID } from '../../util/constants';\nimport { findFilterScope } from './utils';\n\ntype ScopingTreeProps = {\n  setFilterScope: Function;\n};\n\nconst ScopingTree: FC<ScopingTreeProps> = ({ setFilterScope }) => {\n  const [expandedKeys, setExpandedKeys] = useState<string[]>([\n    DASHBOARD_ROOT_ID,\n  ]);\n\n  const { treeData, layout } = useFilterScopeTree();\n\n  const [autoExpandParent, setAutoExpandParent] = useState<boolean>(true);\n  const [checkedKeys, setCheckedKeys] = useState<string[]>([]);\n\n  const onExpand = (expandedKeys: string[]) => {\n    setExpandedKeys(expandedKeys);\n    setAutoExpandParent(false);\n  };\n\n  const onCheck = (checkedKeys: string[]) => {\n    setCheckedKeys(checkedKeys);\n    setFilterScope(findFilterScope(checkedKeys, layout));\n  };\n\n  return (\n    <Tree\n      checkable\n      selectable={false}\n      onExpand={onExpand}\n      expandedKeys={expandedKeys}\n      autoExpandParent={autoExpandParent}\n      onCheck={onCheck}\n      checkedKeys={checkedKeys}\n      treeData={treeData}\n    />\n  );\n};\n\nexport default ScopingTree;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}