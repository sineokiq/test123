{"ast":null,"code":"import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { SET_EXTRA_FORM_DATA, SET_FILTER_CONFIG_COMPLETE } from 'src/dashboard/actions/nativeFilters';\nexport function getInitialFilterState(id) {\n  return {\n    id,\n    extraFormData: {} };\n\n}\nexport function getInitialState(filterConfig) {\n  const filters = {};\n  const filtersState = {};\n  const state = { filters, filtersState };\n  _forEachInstanceProperty(filterConfig).call(filterConfig, filter => {\n    const { id } = filter;\n    filters[id] = filter;\n    filtersState[id] = getInitialFilterState(id);\n  });\n  return state;\n}\nexport default function nativeFilterReducer(state = { filters: {}, filtersState: {} }, action) {\n  const { filters, filtersState } = state;\n  switch (action.type) {\n    case SET_EXTRA_FORM_DATA:\n      return {\n        filters,\n        filtersState: {\n          ...filtersState,\n          [action.filterId]: {\n            ...filtersState[action.filterId],\n            extraFormData: action.extraFormData } } };\n\n\n\n    case SET_FILTER_CONFIG_COMPLETE:\n      return getInitialState(action.filterConfig);\n    // TODO handle SET_FILTER_CONFIG_FAIL action\n    default:\n      return state;}\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getInitialFilterState, \"getInitialFilterState\", \"/app/superset-frontend/src/dashboard/reducers/nativeFilters.ts\");reactHotLoader.register(getInitialState, \"getInitialState\", \"/app/superset-frontend/src/dashboard/reducers/nativeFilters.ts\");reactHotLoader.register(nativeFilterReducer, \"nativeFilterReducer\", \"/app/superset-frontend/src/dashboard/reducers/nativeFilters.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/reducers/nativeFilters.ts"],"names":[],"mappings":"uYAAA;;;;;;;;;;;;;;;;;AAiBG;AACH,SACE,mBADF,EAGE,0BAHF,QAIO,qCAJP;AAWA,OAAM,SAAU,qBAAV,CAAgC,EAAhC,EAA0C;AAC9C,SAAO;AACL,IAAA,EADK;AAEL,IAAA,aAAa,EAAE,EAFV,EAAP;;AAID;AAED,OAAM,SAAU,eAAV,CACJ,YADI,EAC6B;AAEjC,QAAM,OAAO,GAAG,EAAhB;AACA,QAAM,YAAY,GAAG,EAArB;AACA,QAAM,KAAK,GAAG,EAAE,OAAF,EAAW,YAAX,EAAd;AACA,2BAAA,YAAY,MAAZ,CAAA,YAAY,EAAS,MAAM,IAAG;AAC5B,UAAM,EAAE,EAAF,KAAS,MAAf;AACA,IAAA,OAAO,CAAC,EAAD,CAAP,GAAc,MAAd;AACA,IAAA,YAAY,CAAC,EAAD,CAAZ,GAAmB,qBAAqB,CAAC,EAAD,CAAxC;AACD,GAJW,CAAZ;AAKA,SAAO,KAAP;AACD;AAED,eAAc,SAAU,mBAAV,CACZ,KAAA,GAA4B,EAAE,OAAO,EAAE,EAAX,EAAe,YAAY,EAAE,EAA7B,EADhB,EAEZ,MAFY,EAEW;AAEvB,QAAM,EAAE,OAAF,EAAW,YAAX,KAA4B,KAAlC;AACA,UAAQ,MAAM,CAAC,IAAf;AACE,SAAK,mBAAL;AACE,aAAO;AACL,QAAA,OADK;AAEL,QAAA,YAAY,EAAE;AACZ,aAAG,YADS;AAEZ,WAAC,MAAM,CAAC,QAAR,GAAmB;AACjB,eAAG,YAAY,CAAC,MAAM,CAAC,QAAR,CADE;AAEjB,YAAA,aAAa,EAAE,MAAM,CAAC,aAFL,EAFP,EAFT,EAAP;;;;AAWF,SAAK,0BAAL;AACE,aAAO,eAAe,CAAC,MAAM,CAAC,YAAR,CAAtB;AAEF;AACA;AACE,aAAO,KAAP,CAlBJ;;AAoBD,C,iLA9Ce,qB,qHAOA,e,+GAcQ,mB","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport {\n  SET_EXTRA_FORM_DATA,\n  AnyFilterAction,\n  SET_FILTER_CONFIG_COMPLETE,\n} from 'src/dashboard/actions/nativeFilters';\nimport {\n  FilterConfiguration,\n  FilterState,\n  NativeFiltersState,\n} from 'src/dashboard/components/nativeFilters/types';\n\nexport function getInitialFilterState(id: string): FilterState {\n  return {\n    id,\n    extraFormData: {},\n  };\n}\n\nexport function getInitialState(\n  filterConfig: FilterConfiguration,\n): NativeFiltersState {\n  const filters = {};\n  const filtersState = {};\n  const state = { filters, filtersState };\n  filterConfig.forEach(filter => {\n    const { id } = filter;\n    filters[id] = filter;\n    filtersState[id] = getInitialFilterState(id);\n  });\n  return state;\n}\n\nexport default function nativeFilterReducer(\n  state: NativeFiltersState = { filters: {}, filtersState: {} },\n  action: AnyFilterAction,\n) {\n  const { filters, filtersState } = state;\n  switch (action.type) {\n    case SET_EXTRA_FORM_DATA:\n      return {\n        filters,\n        filtersState: {\n          ...filtersState,\n          [action.filterId]: {\n            ...filtersState[action.filterId],\n            extraFormData: action.extraFormData,\n          },\n        },\n      };\n\n    case SET_FILTER_CONFIG_COMPLETE:\n      return getInitialState(action.filterConfig);\n\n    // TODO handle SET_FILTER_CONFIG_FAIL action\n    default:\n      return state;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}