{"ast":null,"code":"import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t, SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\n\nimport { addDangerToast } from 'src/messageToasts/actions';\nimport { getDatasourceParameter } from 'src/modules/utils';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\n\nexport const SET_ALL_SLICES = 'SET_ALL_SLICES';\nexport function setAllSlices(slices) {\n  return { type: SET_ALL_SLICES, payload: { slices } };\n}\n\nexport const FETCH_ALL_SLICES_STARTED = 'FETCH_ALL_SLICES_STARTED';\nexport function fetchAllSlicesStarted() {\n  return { type: FETCH_ALL_SLICES_STARTED };\n}\n\nexport const FETCH_ALL_SLICES_FAILED = 'FETCH_ALL_SLICES_FAILED';\nexport function fetchAllSlicesFailed(error) {\n  return { type: FETCH_ALL_SLICES_FAILED, payload: { error } };\n}\n\nconst FETCH_SLICES_PAGE_SIZE = 200;\nexport function fetchAllSlices(userId) {\n  return (dispatch, getState) => {\n    const { sliceEntities } = getState();\n    if (sliceEntities.lastUpdated === 0) {\n      dispatch(fetchAllSlicesStarted());\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/chart/?q=${rison.encode({\n          columns: [\n          'changed_on_delta_humanized',\n          'changed_on_utc',\n          'datasource_id',\n          'datasource_type',\n          'datasource_url',\n          'datasource_name_text',\n          'description_markeddown',\n          'description',\n          'edit_url',\n          'id',\n          'params',\n          'slice_name',\n          'url',\n          'viz_type'],\n\n          filters: [{ col: 'owners', opr: 'rel_m_m', value: userId }],\n          page_size: FETCH_SLICES_PAGE_SIZE,\n          order_column: 'changed_on_delta_humanized',\n          order_direction: 'desc' })\n        }` }).\n\n      then(({ json }) => {var _context;\n        const slices = {};\n        _forEachInstanceProperty(_context = json.result).call(_context, slice => {\n          let form_data = JSON.parse(slice.params);\n          form_data = {\n            ...form_data,\n            // force using datasource stored in relational table prop\n            datasource:\n            getDatasourceParameter(\n            slice.datasource_id,\n            slice.datasource_type) ||\n            form_data.datasource };\n\n          slices[slice.id] = {\n            slice_id: slice.id,\n            slice_url: slice.url,\n            slice_name: slice.slice_name,\n            edit_url: slice.edit_url,\n            form_data,\n            datasource_name: slice.datasource_name_text,\n            datasource_url: slice.datasource_url,\n            datasource_id: slice.datasource_id,\n            datasource_type: slice.datasource_type,\n            changed_on: new Date(slice.changed_on_utc).getTime(),\n            description: slice.description,\n            description_markdown: slice.description_markeddown,\n            viz_type: slice.viz_type,\n            modified: slice.changed_on_delta_humanized,\n            changed_on_humanized: slice.changed_on_delta_humanized };\n\n        });\n\n        return dispatch(setAllSlices(slices));\n      }).\n      catch(\n      (errorResponse) =>\n      console.log(errorResponse) ||\n      getClientErrorObject(errorResponse).then(({ error }) => {\n        dispatch(\n        fetchAllSlicesFailed(\n        error || t('Could not fetch all saved charts')));\n\n\n        dispatch(\n        addDangerToast(\n        t('Sorry there was an error fetching saved charts: ') + error));\n\n\n      }));\n\n    }\n\n    return dispatch(setAllSlices(sliceEntities.slices));\n  };\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(SET_ALL_SLICES, \"SET_ALL_SLICES\", \"/app/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(setAllSlices, \"setAllSlices\", \"/app/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(FETCH_ALL_SLICES_STARTED, \"FETCH_ALL_SLICES_STARTED\", \"/app/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(fetchAllSlicesStarted, \"fetchAllSlicesStarted\", \"/app/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(FETCH_ALL_SLICES_FAILED, \"FETCH_ALL_SLICES_FAILED\", \"/app/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(fetchAllSlicesFailed, \"fetchAllSlicesFailed\", \"/app/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(FETCH_SLICES_PAGE_SIZE, \"FETCH_SLICES_PAGE_SIZE\", \"/app/superset-frontend/src/dashboard/actions/sliceEntities.js\");reactHotLoader.register(fetchAllSlices, \"fetchAllSlices\", \"/app/superset-frontend/src/dashboard/actions/sliceEntities.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/actions/sliceEntities.js"],"names":["t","SupersetClient","rison","addDangerToast","getDatasourceParameter","getClientErrorObject","SET_ALL_SLICES","setAllSlices","slices","type","payload","FETCH_ALL_SLICES_STARTED","fetchAllSlicesStarted","FETCH_ALL_SLICES_FAILED","fetchAllSlicesFailed","error","FETCH_SLICES_PAGE_SIZE","fetchAllSlices","userId","dispatch","getState","sliceEntities","lastUpdated","get","endpoint","encode","columns","filters","col","opr","value","page_size","order_column","order_direction","then","json","result","slice","form_data","JSON","parse","params","datasource","datasource_id","datasource_type","id","slice_id","slice_url","url","slice_name","edit_url","datasource_name","datasource_name_text","datasource_url","changed_on","Date","changed_on_utc","getTime","description","description_markdown","description_markeddown","viz_type","modified","changed_on_delta_humanized","changed_on_humanized","catch","errorResponse","console","log"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { t, SupersetClient } from '@superset-ui/core';\nimport rison from 'rison';\n\nimport { addDangerToast } from 'src/messageToasts/actions';\nimport { getDatasourceParameter } from 'src/modules/utils';\nimport { getClientErrorObject } from 'src/utils/getClientErrorObject';\n\nexport const SET_ALL_SLICES = 'SET_ALL_SLICES';\nexport function setAllSlices(slices) {\n  return { type: SET_ALL_SLICES, payload: { slices } };\n}\n\nexport const FETCH_ALL_SLICES_STARTED = 'FETCH_ALL_SLICES_STARTED';\nexport function fetchAllSlicesStarted() {\n  return { type: FETCH_ALL_SLICES_STARTED };\n}\n\nexport const FETCH_ALL_SLICES_FAILED = 'FETCH_ALL_SLICES_FAILED';\nexport function fetchAllSlicesFailed(error) {\n  return { type: FETCH_ALL_SLICES_FAILED, payload: { error } };\n}\n\nconst FETCH_SLICES_PAGE_SIZE = 200;\nexport function fetchAllSlices(userId) {\n  return (dispatch, getState) => {\n    const { sliceEntities } = getState();\n    if (sliceEntities.lastUpdated === 0) {\n      dispatch(fetchAllSlicesStarted());\n\n      return SupersetClient.get({\n        endpoint: `/api/v1/chart/?q=${rison.encode({\n          columns: [\n            'changed_on_delta_humanized',\n            'changed_on_utc',\n            'datasource_id',\n            'datasource_type',\n            'datasource_url',\n            'datasource_name_text',\n            'description_markeddown',\n            'description',\n            'edit_url',\n            'id',\n            'params',\n            'slice_name',\n            'url',\n            'viz_type',\n          ],\n          filters: [{ col: 'owners', opr: 'rel_m_m', value: userId }],\n          page_size: FETCH_SLICES_PAGE_SIZE,\n          order_column: 'changed_on_delta_humanized',\n          order_direction: 'desc',\n        })}`,\n      })\n        .then(({ json }) => {\n          const slices = {};\n          json.result.forEach(slice => {\n            let form_data = JSON.parse(slice.params);\n            form_data = {\n              ...form_data,\n              // force using datasource stored in relational table prop\n              datasource:\n                getDatasourceParameter(\n                  slice.datasource_id,\n                  slice.datasource_type,\n                ) || form_data.datasource,\n            };\n            slices[slice.id] = {\n              slice_id: slice.id,\n              slice_url: slice.url,\n              slice_name: slice.slice_name,\n              edit_url: slice.edit_url,\n              form_data,\n              datasource_name: slice.datasource_name_text,\n              datasource_url: slice.datasource_url,\n              datasource_id: slice.datasource_id,\n              datasource_type: slice.datasource_type,\n              changed_on: new Date(slice.changed_on_utc).getTime(),\n              description: slice.description,\n              description_markdown: slice.description_markeddown,\n              viz_type: slice.viz_type,\n              modified: slice.changed_on_delta_humanized,\n              changed_on_humanized: slice.changed_on_delta_humanized,\n            };\n          });\n\n          return dispatch(setAllSlices(slices));\n        })\n        .catch(\n          errorResponse =>\n            console.log(errorResponse) ||\n            getClientErrorObject(errorResponse).then(({ error }) => {\n              dispatch(\n                fetchAllSlicesFailed(\n                  error || t('Could not fetch all saved charts'),\n                ),\n              );\n              dispatch(\n                addDangerToast(\n                  t('Sorry there was an error fetching saved charts: ') + error,\n                ),\n              );\n            }),\n        );\n    }\n\n    return dispatch(setAllSlices(sliceEntities.slices));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}