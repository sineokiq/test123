{"ast":null,"code":"import _sliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/slice\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { DYNAMIC_PLUGIN_CONTROLS_READY } from 'src/chart/chartAction';\nimport { getControlsState } from '../store';\nimport {\ngetControlConfig,\ngetFormDataFromControls,\ngetControlStateFromControlConfig } from\n'../controlUtils';\nimport * as actions from '../actions/exploreActions';\n\nexport default function exploreReducer(state = {}, action) {\n  const actionHandlers = {\n    [DYNAMIC_PLUGIN_CONTROLS_READY]() {\n      return {\n        ...state,\n        controls: action.controlsState };\n\n    },\n    [actions.TOGGLE_FAVE_STAR]() {\n      return {\n        ...state,\n        isStarred: action.isStarred };\n\n    },\n    [actions.POST_DATASOURCE_STARTED]() {\n      return {\n        ...state,\n        isDatasourceMetaLoading: true };\n\n    },\n    [actions.SET_DATASOURCE]() {\n      const newFormData = { ...state.form_data };\n      if (action.datasource.type !== state.datasource.type) {\n        if (action.datasource.type === 'table') {\n          newFormData.granularity_sqla = action.datasource.granularity_sqla;\n          newFormData.time_grain_sqla = action.datasource.time_grain_sqla;\n          delete newFormData.druid_time_origin;\n          delete newFormData.granularity;\n        } else {\n          newFormData.druid_time_origin = action.datasource.druid_time_origin;\n          newFormData.granularity = action.datasource.granularity;\n          delete newFormData.granularity_sqla;\n          delete newFormData.time_grain_sqla;\n        }\n      }\n      const newState = {\n        ...state,\n        datasource: action.datasource,\n        datasource_id: action.datasource.id,\n        datasource_type: action.datasource.type };\n\n      return {\n        ...newState,\n        form_data: newFormData,\n        controls: getControlsState(newState, newFormData) };\n\n    },\n    [actions.FETCH_DATASOURCES_STARTED]() {\n      return {\n        ...state,\n        isDatasourcesLoading: true };\n\n    },\n    [actions.SET_DATASOURCES]() {\n      return {\n        ...state,\n        datasources: action.datasources };\n\n    },\n    [actions.REMOVE_CONTROL_PANEL_ALERT]() {\n      return {\n        ...state,\n        controlPanelAlert: null };\n\n    },\n    [actions.SET_FIELD_VALUE]() {var _context;\n      const new_form_data = state.form_data;\n      const { controlName, value, validationErrors } = action;\n      new_form_data[controlName] = value;\n\n      const vizType = new_form_data.viz_type;\n\n      // Use the processed control config (with overrides and everything)\n      // if `controlName` does not existing in current controls,\n      const controlConfig =\n      state.controls[action.controlName] ||\n      getControlConfig(action.controlName, vizType) ||\n      {};\n\n      // will call validators again\n      const control = {\n        ...getControlStateFromControlConfig(controlConfig, state, action.value) };\n\n\n      // combine newly detected errors with errors from `onChange` event of\n      // each control component (passed via reducer action).\n      const errors = control.validationErrors || [];\n      _forEachInstanceProperty(_context = validationErrors || []).call(_context, err => {\n        // skip duplicated errors\n        if (!_includesInstanceProperty(errors).call(errors, err)) {\n          errors.push(err);\n        }\n      });\n      const hasErrors = errors && errors.length > 0;\n\n      return {\n        ...state,\n        form_data: new_form_data,\n        triggerRender: control.renderTrigger && !hasErrors,\n        controls: {\n          ...state.controls,\n          [action.controlName]: {\n            ...control,\n            validationErrors: errors } } };\n\n\n\n    },\n    [actions.SET_EXPLORE_CONTROLS]() {\n      return {\n        ...state,\n        controls: getControlsState(state, action.formData) };\n\n    },\n    [actions.UPDATE_CHART_TITLE]() {\n      return {\n        ...state,\n        sliceName: action.sliceName };\n\n    },\n    [actions.RESET_FIELDS]() {\n      return {\n        ...state,\n        controls: getControlsState(\n        state,\n        getFormDataFromControls(state.controls)) };\n\n\n    },\n    [actions.CREATE_NEW_SLICE]() {\n      return {\n        ...state,\n        slice: _sliceInstanceProperty(action),\n        controls: getControlsState(state, action.form_data),\n        can_add: action.can_add,\n        can_download: action.can_download,\n        can_overwrite: action.can_overwrite };\n\n    },\n    [actions.SLICE_UPDATED]() {var _action$slice$slice_n;\n      return {\n        ...state,\n        slice: {\n          ..._sliceInstanceProperty(state),\n          ..._sliceInstanceProperty(action) },\n\n        sliceName: (_action$slice$slice_n = _sliceInstanceProperty(action).slice_name) != null ? _action$slice$slice_n : state.sliceName };\n\n    } };\n\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(exploreReducer, \"exploreReducer\", \"/app/superset-frontend/src/explore/reducers/exploreReducer.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/reducers/exploreReducer.js"],"names":["DYNAMIC_PLUGIN_CONTROLS_READY","getControlsState","getControlConfig","getFormDataFromControls","getControlStateFromControlConfig","actions","exploreReducer","state","action","actionHandlers","controls","controlsState","TOGGLE_FAVE_STAR","isStarred","POST_DATASOURCE_STARTED","isDatasourceMetaLoading","SET_DATASOURCE","newFormData","form_data","datasource","type","granularity_sqla","time_grain_sqla","druid_time_origin","granularity","newState","datasource_id","id","datasource_type","FETCH_DATASOURCES_STARTED","isDatasourcesLoading","SET_DATASOURCES","datasources","REMOVE_CONTROL_PANEL_ALERT","controlPanelAlert","SET_FIELD_VALUE","new_form_data","controlName","value","validationErrors","vizType","viz_type","controlConfig","control","errors","err","push","hasErrors","length","triggerRender","renderTrigger","SET_EXPLORE_CONTROLS","formData","UPDATE_CHART_TITLE","sliceName","RESET_FIELDS","CREATE_NEW_SLICE","slice","can_add","can_download","can_overwrite","SLICE_UPDATED","slice_name"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint camelcase: 0 */\nimport { DYNAMIC_PLUGIN_CONTROLS_READY } from 'src/chart/chartAction';\nimport { getControlsState } from '../store';\nimport {\n  getControlConfig,\n  getFormDataFromControls,\n  getControlStateFromControlConfig,\n} from '../controlUtils';\nimport * as actions from '../actions/exploreActions';\n\nexport default function exploreReducer(state = {}, action) {\n  const actionHandlers = {\n    [DYNAMIC_PLUGIN_CONTROLS_READY]() {\n      return {\n        ...state,\n        controls: action.controlsState,\n      };\n    },\n    [actions.TOGGLE_FAVE_STAR]() {\n      return {\n        ...state,\n        isStarred: action.isStarred,\n      };\n    },\n    [actions.POST_DATASOURCE_STARTED]() {\n      return {\n        ...state,\n        isDatasourceMetaLoading: true,\n      };\n    },\n    [actions.SET_DATASOURCE]() {\n      const newFormData = { ...state.form_data };\n      if (action.datasource.type !== state.datasource.type) {\n        if (action.datasource.type === 'table') {\n          newFormData.granularity_sqla = action.datasource.granularity_sqla;\n          newFormData.time_grain_sqla = action.datasource.time_grain_sqla;\n          delete newFormData.druid_time_origin;\n          delete newFormData.granularity;\n        } else {\n          newFormData.druid_time_origin = action.datasource.druid_time_origin;\n          newFormData.granularity = action.datasource.granularity;\n          delete newFormData.granularity_sqla;\n          delete newFormData.time_grain_sqla;\n        }\n      }\n      const newState = {\n        ...state,\n        datasource: action.datasource,\n        datasource_id: action.datasource.id,\n        datasource_type: action.datasource.type,\n      };\n      return {\n        ...newState,\n        form_data: newFormData,\n        controls: getControlsState(newState, newFormData),\n      };\n    },\n    [actions.FETCH_DATASOURCES_STARTED]() {\n      return {\n        ...state,\n        isDatasourcesLoading: true,\n      };\n    },\n    [actions.SET_DATASOURCES]() {\n      return {\n        ...state,\n        datasources: action.datasources,\n      };\n    },\n    [actions.REMOVE_CONTROL_PANEL_ALERT]() {\n      return {\n        ...state,\n        controlPanelAlert: null,\n      };\n    },\n    [actions.SET_FIELD_VALUE]() {\n      const new_form_data = state.form_data;\n      const { controlName, value, validationErrors } = action;\n      new_form_data[controlName] = value;\n\n      const vizType = new_form_data.viz_type;\n\n      // Use the processed control config (with overrides and everything)\n      // if `controlName` does not existing in current controls,\n      const controlConfig =\n        state.controls[action.controlName] ||\n        getControlConfig(action.controlName, vizType) ||\n        {};\n\n      // will call validators again\n      const control = {\n        ...getControlStateFromControlConfig(controlConfig, state, action.value),\n      };\n\n      // combine newly detected errors with errors from `onChange` event of\n      // each control component (passed via reducer action).\n      const errors = control.validationErrors || [];\n      (validationErrors || []).forEach(err => {\n        // skip duplicated errors\n        if (!errors.includes(err)) {\n          errors.push(err);\n        }\n      });\n      const hasErrors = errors && errors.length > 0;\n\n      return {\n        ...state,\n        form_data: new_form_data,\n        triggerRender: control.renderTrigger && !hasErrors,\n        controls: {\n          ...state.controls,\n          [action.controlName]: {\n            ...control,\n            validationErrors: errors,\n          },\n        },\n      };\n    },\n    [actions.SET_EXPLORE_CONTROLS]() {\n      return {\n        ...state,\n        controls: getControlsState(state, action.formData),\n      };\n    },\n    [actions.UPDATE_CHART_TITLE]() {\n      return {\n        ...state,\n        sliceName: action.sliceName,\n      };\n    },\n    [actions.RESET_FIELDS]() {\n      return {\n        ...state,\n        controls: getControlsState(\n          state,\n          getFormDataFromControls(state.controls),\n        ),\n      };\n    },\n    [actions.CREATE_NEW_SLICE]() {\n      return {\n        ...state,\n        slice: action.slice,\n        controls: getControlsState(state, action.form_data),\n        can_add: action.can_add,\n        can_download: action.can_download,\n        can_overwrite: action.can_overwrite,\n      };\n    },\n    [actions.SLICE_UPDATED]() {\n      return {\n        ...state,\n        slice: {\n          ...state.slice,\n          ...action.slice,\n        },\n        sliceName: action.slice.slice_name ?? state.sliceName,\n      };\n    },\n  };\n  if (action.type in actionHandlers) {\n    return actionHandlers[action.type]();\n  }\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}