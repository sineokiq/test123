{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;};export var Scoping;\n(function (Scoping) {\n  Scoping[Scoping[\"all\"] = 0] = \"all\";\n  Scoping[Scoping[\"specific\"] = 1] = \"specific\";\n})(Scoping || (Scoping = {}));;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Scoping, \"Scoping\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/types.ts\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/types.ts"],"names":[],"mappings":"uSAoBA,OAAA,IAAY,OAAZ;AAAA,CAAA,UAAY,OAAZ,EAAmB;AACjB,EAAA,OAAA,CAAA,OAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,KAAA;AACA,EAAA,OAAA,CAAA,OAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACD,CAHD,EAAY,OAAO,KAAP,OAAO,GAAA,EAAA,CAAnB,E,iLAAY,O","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { ExtraFormData, QueryObjectFilterClause } from '@superset-ui/core';\n\nexport enum Scoping {\n  all,\n  specific,\n}\n\ninterface NativeFiltersFormItem {\n  scoping: Scoping;\n  scope: Scope;\n  name: string;\n  dataset: {\n    value: number;\n    label: string;\n  };\n  column: string;\n  defaultValue: string;\n  parentFilter: {\n    value: string;\n    label: string;\n  };\n  inverseSelection: boolean;\n  isInstant: boolean;\n  allowsMultipleValues: boolean;\n  isRequired: boolean;\n}\n\nexport interface NativeFiltersForm {\n  filters: Record<string, NativeFiltersFormItem>;\n}\n\nexport interface Column {\n  name: string;\n  displayName?: string;\n}\n\nexport interface Scope {\n  rootPath: string[];\n  excluded: number[];\n}\n\n/** The target of a filter is the datasource/column being filtered */\nexport interface Target {\n  datasetId: number;\n  column: Column;\n\n  // maybe someday support this?\n  // show values from these columns in the filter options selector\n  // clarityColumns?: Column[];\n}\n\nexport type FilterType = 'text' | 'date';\n\n/**\n * This is a filter configuration object, stored in the dashboard's json metadata.\n * The values here do not reflect the current state of the filter.\n */\nexport interface Filter {\n  allowsMultipleValues: boolean;\n  cascadeParentIds: string[];\n  defaultValue: string | null;\n  currentValue?: (string | number | boolean)[] | null;\n  inverseSelection: boolean;\n  isInstant: boolean;\n  isRequired: boolean;\n  id: string; // randomly generated at filter creation\n  name: string;\n  scope: Scope;\n  type: FilterType;\n  // for now there will only ever be one target\n  // when multiple targets are supported, change this to Target[]\n  targets: [Target];\n}\n\nexport interface CascadeFilter extends Filter {\n  cascadeChildren: CascadeFilter[];\n}\n\nexport type FilterConfiguration = Filter[];\n\nexport type SelectedValues = string[] | null;\n\n/** Current state of the filter, stored in `nativeFilters` in redux */\nexport type FilterState = {\n  id: string; // ties this filter state to the config object\n  extraFormData?: ExtraFormData;\n};\n\nexport type AllFilterState = {\n  column: Column;\n  datasetId: number;\n  datasource: string;\n  id: string;\n  selectedValues: SelectedValues;\n  filterClause?: QueryObjectFilterClause;\n};\n\n/** UI Ant tree type */\nexport type TreeItem = {\n  children: TreeItem[];\n  key: string;\n  title: string;\n};\n\nexport type NativeFiltersState = {\n  filters: {\n    [filterId: string]: Filter;\n  };\n  filtersState: {\n    [filterId: string]: FilterState;\n  };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}