{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs3/core-js-stable/parse-int\";import _parseFloat from \"@babel/runtime-corejs3/core-js-stable/parse-float\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { FormGroup, FormControl } from 'react-bootstrap';\nimport { legacyValidateNumber, legacyValidateInteger } from '@superset-ui/core';\nimport debounce from 'lodash/debounce';\nimport ControlHeader from '../ControlHeader';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst generateControlId = controlId => `formInlineName_${controlId != null ? controlId : (Math.random() * 1000000).toFixed()}`;\nexport default class TextControl extends React.Component {\n  constructor(props) {\n    super(props);\n    this.debouncedOnChange = debounce(inputValue => {\n      this.onChange(inputValue);\n    }, 500);\n    this.onChange = inputValue => {var _this$props$onChange, _this$props;\n      let parsedValue = inputValue;\n      // Validation & casting\n      const errors = [];\n      if (inputValue !== '' && this.props.isFloat) {\n        const error = legacyValidateNumber(inputValue);\n        if (error) {\n          errors.push(error);\n        } else\n        {\n          parsedValue = inputValue.match(/.*([.0])$/g) ?\n          inputValue :\n          _parseFloat(inputValue);\n        }\n      }\n      if (inputValue !== '' && this.props.isInt) {\n        const error = legacyValidateInteger(inputValue);\n        if (error) {\n          errors.push(error);\n        } else\n        {\n          parsedValue = _parseInt(inputValue, 10);\n        }\n      }\n      (_this$props$onChange = (_this$props = this.props).onChange) == null ? void 0 : _this$props$onChange.call(_this$props, parsedValue, errors);\n    };\n    this.onChangeWrapper = event => {\n      const { value } = event.target;\n      this.setState({ value });\n      // use debounce when change takes effect immediately after user starts typing\n      const onChange = this.props.renderTrigger ?\n      this.debouncedOnChange :\n      this.onChange;\n      onChange(value);\n    };\n    this.render = () => {\n      const { value: rawValue } = this.state;\n      const value = typeof rawValue !== 'undefined' && rawValue !== null ?\n      rawValue.toString() :\n      '';\n      return ___EmotionJSX(\"div\", null,\n      ___EmotionJSX(ControlHeader, this.props),\n      ___EmotionJSX(FormGroup, { controlId: this.state.controlId, bsSize: \"medium\" },\n      ___EmotionJSX(FormControl, { type: \"text\", \"data-test\": \"inline-name\", placeholder: this.props.placeholder, onChange: this.onChangeWrapper, onFocus: this.props.onFocus, value: value, disabled: this.props.disabled })));\n\n\n    };\n    // if there's no control id provided, generate a random\n    // number to prevent rendering elements with same ids\n    this.state = {\n      controlId: generateControlId(props.controlId),\n      value: props.value };\n\n  } // @ts-ignore\n  __reactstandin__regenerateByEval(key, code) {// @ts-ignore\n    this[key] = eval(code);}};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(generateControlId, \"generateControlId\", \"/app/superset-frontend/src/explore/components/controls/TextControl.tsx\");reactHotLoader.register(TextControl, \"TextControl\", \"/app/superset-frontend/src/explore/components/controls/TextControl.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/explore/components/controls/TextControl.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { FormGroup, FormControl } from 'react-bootstrap';\nimport { legacyValidateNumber, legacyValidateInteger } from '@superset-ui/core';\nimport debounce from 'lodash/debounce';\nimport ControlHeader from '../ControlHeader';\n\ninterface TextControlProps {\n  disabled?: boolean;\n  isFloat?: boolean;\n  isInt?: boolean;\n  onChange?: (value: any, errors: any) => {};\n  onFocus?: () => {};\n  placeholder?: string;\n  value?: string | number;\n  controlId?: string;\n  renderTrigger?: boolean;\n}\n\ninterface TextControlState {\n  controlId: string;\n  value?: string | number;\n}\n\nconst generateControlId = (controlId?: string) =>\n  `formInlineName_${controlId ?? (Math.random() * 1000000).toFixed()}`;\n\nexport default class TextControl extends React.Component<\n  TextControlProps,\n  TextControlState\n> {\n  debouncedOnChange = debounce((inputValue: string) => {\n    this.onChange(inputValue);\n  }, 500);\n\n  constructor(props: TextControlProps) {\n    super(props);\n\n    // if there's no control id provided, generate a random\n    // number to prevent rendering elements with same ids\n    this.state = {\n      controlId: generateControlId(props.controlId),\n      value: props.value,\n    };\n  }\n\n  onChange = (inputValue: string) => {\n    let parsedValue: string | number = inputValue;\n    // Validation & casting\n    const errors = [];\n    if (inputValue !== '' && this.props.isFloat) {\n      const error = legacyValidateNumber(inputValue);\n      if (error) {\n        errors.push(error);\n      } else {\n        parsedValue = inputValue.match(/.*([.0])$/g)\n          ? inputValue\n          : parseFloat(inputValue);\n      }\n    }\n    if (inputValue !== '' && this.props.isInt) {\n      const error = legacyValidateInteger(inputValue);\n      if (error) {\n        errors.push(error);\n      } else {\n        parsedValue = parseInt(inputValue, 10);\n      }\n    }\n    this.props.onChange?.(parsedValue, errors);\n  };\n\n  onChangeWrapper = (event: any) => {\n    const { value } = event.target;\n    this.setState({ value });\n\n    // use debounce when change takes effect immediately after user starts typing\n    const onChange = this.props.renderTrigger\n      ? this.debouncedOnChange\n      : this.onChange;\n    onChange(value);\n  };\n\n  render = () => {\n    const { value: rawValue } = this.state;\n    const value =\n      typeof rawValue !== 'undefined' && rawValue !== null\n        ? rawValue.toString()\n        : '';\n\n    return (\n      <div>\n        <ControlHeader {...this.props} />\n        <FormGroup controlId={this.state.controlId} bsSize=\"medium\">\n          <FormControl\n            type=\"text\"\n            data-test=\"inline-name\"\n            placeholder={this.props.placeholder}\n            onChange={this.onChangeWrapper}\n            onFocus={this.props.onFocus}\n            value={value}\n            disabled={this.props.disabled}\n          />\n        </FormGroup>\n      </div>\n    );\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}