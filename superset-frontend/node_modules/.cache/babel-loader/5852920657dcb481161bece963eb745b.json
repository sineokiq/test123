{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _findInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/find\";import _someInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/some\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _uniq from \"lodash/uniq\";import _findLastIndex from \"lodash/findLastIndex\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\n\nimport shortid from 'shortid';\nimport { DeleteFilled, PlusOutlined } from '@ant-design/icons';\nimport { styled, t } from '@superset-ui/core';\nimport { Form } from 'src/common/components';\nimport { StyledModal } from 'src/common/components/Modal';\nimport Button from 'src/components/Button';\nimport { LineEditableTabs } from 'src/common/components/Tabs';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { useFilterConfigMap, useFilterConfiguration } from './state';\nimport FilterConfigForm from './FilterConfigForm';\nimport { CancelConfirmationAlert } from './CancelConfirmationAlert';\n// how long to show the \"undo\" button when removing a filter\nimport { jsx as ___EmotionJSX } from \"@emotion/core\";const REMOVAL_DELAY_SECS = 5;\nconst StyledModalBody = styled.div`\n  display: flex;\n  flex-direction: row;\n  .filters-list {\n    width: ${({ theme }) => theme.gridUnit * 50}px;\n    overflow: auto;\n  }\n`;\nconst StyledForm = styled(Form)`\n  width: 100%;\n`;\nconst StyledSpan = styled.span`\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  &: hover {\n    color: ${({ theme }) => theme.colors.primary.dark2};\n  }\n`;\nconst FilterTabs = styled(LineEditableTabs)`\n  // extra selector specificity:\n  &.ant-tabs-card > .ant-tabs-nav .ant-tabs-tab {\n    min-width: 200px;\n    margin-left: 0;\n    padding: 0 ${({ theme }) => theme.gridUnit * 2}px\n      ${({ theme }) => theme.gridUnit}px;\n\n    &:hover,\n    &-active {\n      color: ${({ theme }) => theme.colors.grayscale.dark1};\n      border-radius: ${({ theme }) => theme.borderRadius}px;\n      background-color: ${({ theme }) => theme.colors.grayscale.light2};\n    }\n  }\n\n  .ant-tabs-tab-btn {\n    text-align: left;\n    justify-content: space-between;\n    text-transform: unset;\n  }\n`;\nconst FilterTabTitle = styled.span`\n  transition: color ${({ theme }) => theme.transitionTiming}s;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: ${({ theme }) => theme.gridUnit}px\n    ${({ theme }) => theme.gridUnit * 2}px 0 0;\n\n  @keyframes tabTitleRemovalAnimation {\n    0%,\n    90% {\n      opacity: 1;\n    }\n    95%,\n    100% {\n      opacity: 0;\n    }\n  }\n\n  &.removed {\n    color: ${({ theme }) => theme.colors.warning.dark1};\n    transform-origin: top;\n    animation-name: tabTitleRemovalAnimation;\n    animation-duration: ${REMOVAL_DELAY_SECS}s;\n  }\n`;\nconst StyledAddFilterBox = styled.div`\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  text-align: left;\n  padding: ${({ theme }) => theme.gridUnit * 2}px 0;\n  margin: ${({ theme }) => theme.gridUnit * 3}px 0 0\n    ${({ theme }) => -theme.gridUnit * 2}px;\n  border-top: 1px solid ${({ theme }) => theme.colors.grayscale.light1};\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\nfunction generateFilterId() {\n  return `NATIVE_FILTER-${shortid.generate()}`;\n}\nconst getFilterIds = config => _mapInstanceProperty(config).call(config, filter => filter.id);\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nexport function FilterConfigModal({ isOpen, initialFilterId, createNewOnOpen, save, onCancel }) {\n  const [form] = Form.useForm();\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState([]);\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState({});\n  const [saveAlertVisible, setSaveAlertVisible] = useState(false);\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = useCallback(id => {\n    const removal = removedFilters[id];\n    // gotta clear the removal timeout to prevent the filter from getting deleted\n    if (removal != null && removal.isPending)\n    clearTimeout(removal.timerId);\n    setRemovedFilters(current => ({ ...current, [id]: null }));\n  }, [removedFilters]);\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(() => {var _context;return _filterInstanceProperty(_context = _uniq([...getFilterIds(filterConfig), ...newFilterIds])).call(_context, id => {var _removedFilters$id;return !removedFilters[id] || ((_removedFilters$id = removedFilters[id]) == null ? void 0 : _removedFilters$id.isPending);});}, [filterConfig, newFilterIds, removedFilters]);\n  // open the first filter in the list to start\n  const getInitialCurrentFilterId = useCallback(() => initialFilterId != null ? initialFilterId : filterIds[0], [initialFilterId, filterIds]);\n  const [currentFilterId, setCurrentFilterId] = useState(getInitialCurrentFilterId);\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] = useState({\n    filters: {} });\n\n  const wasOpen = usePrevious(isOpen);\n  useEffect(() => {\n    // if the currently viewed filter is fully removed, change to another tab\n    const currentFilterRemoved = removedFilters[currentFilterId];\n    if (currentFilterRemoved && !currentFilterRemoved.isPending) {\n      const nextFilterIndex = _findLastIndex(filterIds, id => !removedFilters[id] && id !== currentFilterId);\n      if (nextFilterIndex !== -1)\n      setCurrentFilterId(filterIds[nextFilterIndex]);\n    }\n  }, [currentFilterId, removedFilters, filterIds]);\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback(() => {\n    const newFilterId = generateFilterId();\n    setNewFilterIds([...newFilterIds, newFilterId]);\n    setCurrentFilterId(newFilterId);\n    setSaveAlertVisible(false);\n  }, [newFilterIds, setCurrentFilterId]);\n  // if this is a \"create\" modal rather than an \"edit\" modal,\n  // add a filter on modal open\n  useEffect(() => {\n    if (createNewOnOpen && isOpen && !wasOpen) {\n      addFilter();\n    }\n  }, [createNewOnOpen, isOpen, wasOpen, addFilter]);\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = useCallback(() => {\n    form.resetFields();\n    setNewFilterIds([]);\n    setCurrentFilterId(getInitialCurrentFilterId());\n    setRemovedFilters({});\n    setSaveAlertVisible(false);\n  }, [form, getInitialCurrentFilterId]);\n  const completeFilterRemoval = filterId => {\n    // the filter state will actually stick around in the form,\n    // and the filterConfig/newFilterIds, but we use removedFilters\n    // to mark it as removed.\n    setRemovedFilters(removedFilters => ({\n      ...removedFilters,\n      [filterId]: { isPending: false } }));\n\n  };\n  function onTabEdit(filterId, action) {\n    if (action === 'remove') {\n      // first set up the timer to completely remove it\n      const timerId = window.setTimeout(() => completeFilterRemoval(filterId), REMOVAL_DELAY_SECS * 1000);\n      // mark the filter state as \"removal in progress\"\n      setRemovedFilters(removedFilters => ({\n        ...removedFilters,\n        [filterId]: { isPending: true, timerId } }));\n\n      setSaveAlertVisible(false);\n    } else\n    if (action === 'add') {\n      addFilter();\n    }\n  }\n  function getFilterTitle(id) {var _ref, _formValues$filters$i, _formValues$filters$i2, _filterConfigMap$id;\n    return (_ref = (_formValues$filters$i = (_formValues$filters$i2 = formValues.filters[id]) == null ? void 0 : _formValues$filters$i2.name) != null ? _formValues$filters$i : (_filterConfigMap$id = filterConfigMap[id]) == null ? void 0 : _filterConfigMap$id.name) != null ? _ref : 'New filter';\n  }\n  function getParentFilters(id) {var _context2;\n    return _mapInstanceProperty(_context2 = _filterInstanceProperty(filterIds).call(filterIds,\n    filterId => filterId !== id && !removedFilters[filterId])).call(_context2,\n    id => ({\n      id,\n      title: getFilterTitle(id) }));\n\n  }\n  const addValidationError = (filterId, field, error) => {\n    const fieldError = {\n      name: ['filters', filterId, field],\n      errors: [error] };\n\n    form.setFields([fieldError]);\n    // eslint-disable-next-line no-throw-literal\n    throw { errorFields: [fieldError] };\n  };\n  const validateForm = useCallback(async () => {\n    try {var _context3;\n      const formValues = await form.validateFields();\n      const validateInstant = filterId => {var _filterConfigMap$filt;\n        const isInstant = formValues.filters[filterId] ?\n        formValues.filters[filterId].isInstant : (_filterConfigMap$filt =\n        filterConfigMap[filterId]) == null ? void 0 : _filterConfigMap$filt.isInstant;\n        if (!isInstant) {\n          addValidationError(filterId, 'isInstant', 'For parent filters changes must be applied instantly');\n        }\n      };\n      const validateCycles = (filterId, trace = []) => {var _formValues$filters$f, _filterConfigMap$filt2, _filterConfigMap$filt3;\n        if (_includesInstanceProperty(trace).call(trace, filterId)) {\n          addValidationError(filterId, 'parentFilter', 'Cannot create cyclic hierarchy');\n        }\n        const parentId = formValues.filters[filterId] ? (_formValues$filters$f =\n        formValues.filters[filterId].parentFilter) == null ? void 0 : _formValues$filters$f.value : (_filterConfigMap$filt2 =\n        filterConfigMap[filterId]) == null ? void 0 : (_filterConfigMap$filt3 = _filterConfigMap$filt2.cascadeParentIds) == null ? void 0 : _filterConfigMap$filt3[0];\n        if (parentId) {\n          validateInstant(parentId);\n          validateCycles(parentId, [...trace, filterId]);\n        }\n      };\n      _forEachInstanceProperty(_context3 = _filterInstanceProperty(filterIds).call(filterIds,\n      id => !removedFilters[id])).call(_context3,\n      filterId => validateCycles(filterId));\n      return formValues;\n    }\n    catch (error) {\n      console.warn('Filter configuration failed:', error);\n      if (!error.errorFields || !error.errorFields.length)\n      return null; // not a validation error\n      const errorFields = error.errorFields;\n      // filter id is the second item in the field name\n      if (!_someInstanceProperty(errorFields).call(errorFields, field => field.name[1] === currentFilterId)) {\n        // switch to the first tab that had a validation error\n        const filterError = _findInstanceProperty(errorFields).call(errorFields, field => field.name[0] === 'filters');\n        if (filterError) {\n          setCurrentFilterId(filterError.name[1]);\n        }\n      }\n      return null;\n    }\n  }, [form, currentFilterId, filterConfigMap, filterIds, removedFilters]);\n  const onOk = useCallback(async () => {var _context4;\n    const values = await validateForm();\n    if (values == null)\n    return;\n    const newFilterConfig = _mapInstanceProperty(_context4 = _filterInstanceProperty(filterIds).call(filterIds,\n    id => !removedFilters[id])).call(_context4,\n    id => {\n      // create a filter config object from the form inputs\n      const formInputs = values.filters[id];\n      // if user didn't open a filter, return the original config\n      if (!formInputs)\n      return filterConfigMap[id];\n      return {\n        id,\n        name: formInputs.name,\n        type: 'text',\n        // for now there will only ever be one target\n        targets: [\n        {\n          datasetId: formInputs.dataset.value,\n          column: {\n            name: formInputs.column } }],\n\n\n\n        defaultValue: formInputs.defaultValue || null,\n        cascadeParentIds: formInputs.parentFilter ?\n        [formInputs.parentFilter.value] :\n        [],\n        scope: {\n          rootPath: [DASHBOARD_ROOT_ID],\n          excluded: [] },\n\n        inverseSelection: !!formInputs.inverseSelection,\n        isInstant: !!formInputs.isInstant,\n        allowsMultipleValues: !!formInputs.allowsMultipleValues,\n        isRequired: !!formInputs.isRequired };\n\n    });\n    await save(newFilterConfig);\n    resetForm();\n  }, [\n  save,\n  resetForm,\n  filterIds,\n  removedFilters,\n  filterConfigMap,\n  validateForm]);\n\n  const confirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n  const unsavedFiltersIds = _filterInstanceProperty(newFilterIds).call(newFilterIds, id => !removedFilters[id]);\n  const getUnsavedFilterNames = () => {\n    const unsavedFiltersNames = _mapInstanceProperty(unsavedFiltersIds).call(unsavedFiltersIds, id => `\"${getFilterTitle(id)}\"`);\n    if (unsavedFiltersNames.length === 0) {\n      return '';\n    }\n    if (unsavedFiltersNames.length === 1) {\n      return unsavedFiltersNames[0];\n    }\n    const lastFilter = unsavedFiltersNames.pop();\n    return `${unsavedFiltersNames.join(', ')} ${t('and')} ${lastFilter}`;\n  };\n  const handleCancel = () => {\n    if (unsavedFiltersIds.length > 0) {\n      setSaveAlertVisible(true);\n    } else\n    {\n      confirmCancel();\n    }\n  };\n  const renderFooterElements = () => {\n    if (saveAlertVisible) {\n      return [\n      ___EmotionJSX(CancelConfirmationAlert, { title: `${unsavedFiltersIds.length} ${t('unsaved filters')}`, onConfirm: confirmCancel, onDismiss: () => setSaveAlertVisible(false) },\n      t(`Are you sure you want to cancel?`), \" \", getUnsavedFilterNames(), ' ',\n      t(`will not be saved.`))];\n\n\n    }\n    return [\n    ___EmotionJSX(Button, { key: \"cancel\", buttonStyle: \"secondary\", onClick: handleCancel },\n    t('Cancel')),\n\n    ___EmotionJSX(Button, { key: \"submit\", buttonStyle: \"primary\", onClick: onOk },\n    t('Save'))];\n\n\n  };\n  return ___EmotionJSX(StyledModal, { visible: isOpen, title: t('Filter configuration and scoping'), width: \"55%\", onCancel: handleCancel, onOk: onOk, centered: true, \"data-test\": \"filter-modal\", footer: renderFooterElements() },\n  ___EmotionJSX(ErrorBoundary, null,\n  ___EmotionJSX(StyledModalBody, null,\n  ___EmotionJSX(StyledForm, { form: form, onValuesChange: (changes, values) => {var _context5;\n      if (changes.filters &&\n      _someInstanceProperty(_context5 = _Object$values(changes.filters)).call(_context5, filter => filter.name != null)) {\n        // we only need to set this if a name changed\n        setFormValues(values);\n      }\n      setSaveAlertVisible(false);\n    }, layout: \"vertical\" },\n  ___EmotionJSX(FilterTabs, { tabPosition: \"left\", onChange: setCurrentFilterId, activeKey: currentFilterId, onEdit: onTabEdit, addIcon: ___EmotionJSX(StyledAddFilterBox, null,\n    ___EmotionJSX(PlusOutlined, null), \" \", ___EmotionJSX(\"span\", null, t('Add filter'))) },\n\n  _mapInstanceProperty(filterIds).call(filterIds, id => ___EmotionJSX(LineEditableTabs.TabPane, { tab: ___EmotionJSX(FilterTabTitle, { className: removedFilters[id] ? 'removed' : '' },\n    ___EmotionJSX(\"div\", null,\n    removedFilters[id] ?\n    t('(Removed)') :\n    getFilterTitle(id)),\n\n    removedFilters[id] && ___EmotionJSX(StyledSpan, { role: \"button\", tabIndex: 0, onClick: () => restoreFilter(id) },\n    t('Undo?'))),\n\n    key: id, closeIcon: removedFilters[id] ? ___EmotionJSX(React.Fragment, null) : ___EmotionJSX(DeleteFilled, null) },\n  ___EmotionJSX(FilterConfigForm, { form: form, filterId: id, filterToEdit: filterConfigMap[id], removed: !!removedFilters[id], restore: restoreFilter, parentFilters: getParentFilters(id) }))))))));\n\n\n\n\n\n\n}__signature__(FilterConfigModal, \"useForm{[form]}\\nuseFilterConfiguration{filterConfig}\\nuseFilterConfigMap{filterConfigMap}\\nuseState{[newFilterIds, setNewFilterIds]([])}\\nuseState{[removedFilters, setRemovedFilters]({})}\\nuseState{[saveAlertVisible, setSaveAlertVisible](false)}\\nuseCallback{restoreFilter}\\nuseMemo{filterIds}\\nuseCallback{getInitialCurrentFilterId}\\nuseState{[currentFilterId, setCurrentFilterId](getInitialCurrentFilterId)}\\nuseState{[formValues, setFormValues]({\\n        filters: {},\\n    })}\\nusePrevious{wasOpen}\\nuseEffect{}\\nuseCallback{addFilter}\\nuseEffect{}\\nuseCallback{resetForm}\\nuseCallback{validateForm}\\nuseCallback{onOk}\", () => [useFilterConfiguration, useFilterConfigMap, usePrevious]);;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(REMOVAL_DELAY_SECS, \"REMOVAL_DELAY_SECS\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");reactHotLoader.register(StyledModalBody, \"StyledModalBody\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");reactHotLoader.register(StyledForm, \"StyledForm\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");reactHotLoader.register(StyledSpan, \"StyledSpan\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");reactHotLoader.register(FilterTabs, \"FilterTabs\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");reactHotLoader.register(FilterTabTitle, \"FilterTabTitle\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");reactHotLoader.register(StyledAddFilterBox, \"StyledAddFilterBox\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");reactHotLoader.register(generateFilterId, \"generateFilterId\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");reactHotLoader.register(getFilterIds, \"getFilterIds\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");reactHotLoader.register(FilterConfigModal, \"FilterConfigModal\", \"/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/nativeFilters/FilterConfigModal.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { findLastIndex, uniq } from 'lodash';\nimport shortid from 'shortid';\nimport { DeleteFilled, PlusOutlined } from '@ant-design/icons';\nimport { styled, t } from '@superset-ui/core';\nimport { Form } from 'src/common/components';\nimport { StyledModal } from 'src/common/components/Modal';\nimport Button from 'src/components/Button';\nimport { LineEditableTabs } from 'src/common/components/Tabs';\nimport { DASHBOARD_ROOT_ID } from 'src/dashboard/util/constants';\nimport { usePrevious } from 'src/common/hooks/usePrevious';\nimport ErrorBoundary from 'src/components/ErrorBoundary';\nimport { useFilterConfigMap, useFilterConfiguration } from './state';\nimport FilterConfigForm from './FilterConfigForm';\nimport { FilterConfiguration, NativeFiltersForm } from './types';\nimport { CancelConfirmationAlert } from './CancelConfirmationAlert';\n\n// how long to show the \"undo\" button when removing a filter\nconst REMOVAL_DELAY_SECS = 5;\n\nconst StyledModalBody = styled.div`\n  display: flex;\n  flex-direction: row;\n  .filters-list {\n    width: ${({ theme }) => theme.gridUnit * 50}px;\n    overflow: auto;\n  }\n`;\n\nconst StyledForm = styled(Form)`\n  width: 100%;\n`;\n\nconst StyledSpan = styled.span`\n  cursor: pointer;\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  &: hover {\n    color: ${({ theme }) => theme.colors.primary.dark2};\n  }\n`;\n\nconst FilterTabs = styled(LineEditableTabs)`\n  // extra selector specificity:\n  &.ant-tabs-card > .ant-tabs-nav .ant-tabs-tab {\n    min-width: 200px;\n    margin-left: 0;\n    padding: 0 ${({ theme }) => theme.gridUnit * 2}px\n      ${({ theme }) => theme.gridUnit}px;\n\n    &:hover,\n    &-active {\n      color: ${({ theme }) => theme.colors.grayscale.dark1};\n      border-radius: ${({ theme }) => theme.borderRadius}px;\n      background-color: ${({ theme }) => theme.colors.grayscale.light2};\n    }\n  }\n\n  .ant-tabs-tab-btn {\n    text-align: left;\n    justify-content: space-between;\n    text-transform: unset;\n  }\n`;\n\nconst FilterTabTitle = styled.span`\n  transition: color ${({ theme }) => theme.transitionTiming}s;\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  padding: ${({ theme }) => theme.gridUnit}px\n    ${({ theme }) => theme.gridUnit * 2}px 0 0;\n\n  @keyframes tabTitleRemovalAnimation {\n    0%,\n    90% {\n      opacity: 1;\n    }\n    95%,\n    100% {\n      opacity: 0;\n    }\n  }\n\n  &.removed {\n    color: ${({ theme }) => theme.colors.warning.dark1};\n    transform-origin: top;\n    animation-name: tabTitleRemovalAnimation;\n    animation-duration: ${REMOVAL_DELAY_SECS}s;\n  }\n`;\n\nconst StyledAddFilterBox = styled.div`\n  color: ${({ theme }) => theme.colors.primary.dark1};\n  text-align: left;\n  padding: ${({ theme }) => theme.gridUnit * 2}px 0;\n  margin: ${({ theme }) => theme.gridUnit * 3}px 0 0\n    ${({ theme }) => -theme.gridUnit * 2}px;\n  border-top: 1px solid ${({ theme }) => theme.colors.grayscale.light1};\n\n  &:hover {\n    color: ${({ theme }) => theme.colors.primary.base};\n  }\n`;\n\ntype FilterRemoval =\n  | null\n  | {\n      isPending: true; // the filter sticks around for a moment before removal is finalized\n      timerId: number; // id of the timer that finally removes the filter\n    }\n  | { isPending: false };\n\nfunction generateFilterId() {\n  return `NATIVE_FILTER-${shortid.generate()}`;\n}\n\nexport interface FilterConfigModalProps {\n  isOpen: boolean;\n  initialFilterId?: string;\n  createNewOnOpen?: boolean;\n  save: (filterConfig: FilterConfiguration) => Promise<void>;\n  onCancel: () => void;\n}\n\nconst getFilterIds = (config: FilterConfiguration) =>\n  config.map(filter => filter.id);\n\n/**\n * This is the modal to configure all the dashboard-native filters.\n * Manages modal-level state, such as what filters are in the list,\n * and which filter is currently being edited.\n *\n * Calls the `save` callback with the new FilterConfiguration object\n * when the user saves the filters.\n */\nexport function FilterConfigModal({\n  isOpen,\n  initialFilterId,\n  createNewOnOpen,\n  save,\n  onCancel,\n}: FilterConfigModalProps) {\n  const [form] = Form.useForm<NativeFiltersForm>();\n\n  // the filter config from redux state, this does not change until modal is closed.\n  const filterConfig = useFilterConfiguration();\n  const filterConfigMap = useFilterConfigMap();\n\n  // new filter ids belong to filters have been added during\n  // this configuration session, and only exist in the form state until we submit.\n  const [newFilterIds, setNewFilterIds] = useState<string[]>([]);\n\n  // store ids of filters that have been removed with the time they were removed\n  // so that we can disappear them after a few secs.\n  // filters are still kept in state until form is submitted.\n  const [removedFilters, setRemovedFilters] = useState<\n    Record<string, FilterRemoval>\n  >({});\n\n  const [saveAlertVisible, setSaveAlertVisible] = useState<boolean>(false);\n\n  // brings back a filter that was previously removed (\"Undo\")\n  const restoreFilter = useCallback(\n    (id: string) => {\n      const removal = removedFilters[id];\n      // gotta clear the removal timeout to prevent the filter from getting deleted\n      if (removal?.isPending) clearTimeout(removal.timerId);\n      setRemovedFilters(current => ({ ...current, [id]: null }));\n    },\n    [removedFilters],\n  );\n\n  // The full ordered set of ((original + new) - completely removed) filter ids\n  // Use this as the canonical list of what filters are being configured!\n  // This includes filter ids that are pending removal, so check for that.\n  const filterIds = useMemo(\n    () =>\n      uniq([...getFilterIds(filterConfig), ...newFilterIds]).filter(\n        id => !removedFilters[id] || removedFilters[id]?.isPending,\n      ),\n    [filterConfig, newFilterIds, removedFilters],\n  );\n\n  // open the first filter in the list to start\n  const getInitialCurrentFilterId = useCallback(\n    () => initialFilterId ?? filterIds[0],\n    [initialFilterId, filterIds],\n  );\n  const [currentFilterId, setCurrentFilterId] = useState(\n    getInitialCurrentFilterId,\n  );\n\n  // the form values are managed by the antd form, but we copy them to here\n  // so that we can display them (e.g. filter titles in the tab headers)\n  const [formValues, setFormValues] = useState<NativeFiltersForm>({\n    filters: {},\n  });\n\n  const wasOpen = usePrevious(isOpen);\n\n  useEffect(() => {\n    // if the currently viewed filter is fully removed, change to another tab\n    const currentFilterRemoved = removedFilters[currentFilterId];\n    if (currentFilterRemoved && !currentFilterRemoved.isPending) {\n      const nextFilterIndex = findLastIndex(\n        filterIds,\n        id => !removedFilters[id] && id !== currentFilterId,\n      );\n      if (nextFilterIndex !== -1)\n        setCurrentFilterId(filterIds[nextFilterIndex]);\n    }\n  }, [currentFilterId, removedFilters, filterIds]);\n\n  // generates a new filter id and appends it to the newFilterIds\n  const addFilter = useCallback(() => {\n    const newFilterId = generateFilterId();\n    setNewFilterIds([...newFilterIds, newFilterId]);\n    setCurrentFilterId(newFilterId);\n    setSaveAlertVisible(false);\n  }, [newFilterIds, setCurrentFilterId]);\n\n  // if this is a \"create\" modal rather than an \"edit\" modal,\n  // add a filter on modal open\n  useEffect(() => {\n    if (createNewOnOpen && isOpen && !wasOpen) {\n      addFilter();\n    }\n  }, [createNewOnOpen, isOpen, wasOpen, addFilter]);\n\n  // After this, it should be as if the modal was just opened fresh.\n  // Called when the modal is closed.\n  const resetForm = useCallback(() => {\n    form.resetFields();\n    setNewFilterIds([]);\n    setCurrentFilterId(getInitialCurrentFilterId());\n    setRemovedFilters({});\n    setSaveAlertVisible(false);\n  }, [form, getInitialCurrentFilterId]);\n\n  const completeFilterRemoval = (filterId: string) => {\n    // the filter state will actually stick around in the form,\n    // and the filterConfig/newFilterIds, but we use removedFilters\n    // to mark it as removed.\n    setRemovedFilters(removedFilters => ({\n      ...removedFilters,\n      [filterId]: { isPending: false },\n    }));\n  };\n\n  function onTabEdit(filterId: string, action: 'add' | 'remove') {\n    if (action === 'remove') {\n      // first set up the timer to completely remove it\n      const timerId = window.setTimeout(\n        () => completeFilterRemoval(filterId),\n        REMOVAL_DELAY_SECS * 1000,\n      );\n      // mark the filter state as \"removal in progress\"\n      setRemovedFilters(removedFilters => ({\n        ...removedFilters,\n        [filterId]: { isPending: true, timerId },\n      }));\n      setSaveAlertVisible(false);\n    } else if (action === 'add') {\n      addFilter();\n    }\n  }\n\n  function getFilterTitle(id: string) {\n    return (\n      formValues.filters[id]?.name ?? filterConfigMap[id]?.name ?? 'New filter'\n    );\n  }\n\n  function getParentFilters(id: string) {\n    return filterIds\n      .filter(filterId => filterId !== id && !removedFilters[filterId])\n      .map(id => ({\n        id,\n        title: getFilterTitle(id),\n      }));\n  }\n\n  const addValidationError = (\n    filterId: string,\n    field: string,\n    error: string,\n  ) => {\n    const fieldError = {\n      name: ['filters', filterId, field],\n      errors: [error],\n    };\n    form.setFields([fieldError]);\n    // eslint-disable-next-line no-throw-literal\n    throw { errorFields: [fieldError] };\n  };\n\n  const validateForm = useCallback(async () => {\n    try {\n      const formValues = (await form.validateFields()) as NativeFiltersForm;\n\n      const validateInstant = (filterId: string) => {\n        const isInstant = formValues.filters[filterId]\n          ? formValues.filters[filterId].isInstant\n          : filterConfigMap[filterId]?.isInstant;\n        if (!isInstant) {\n          addValidationError(\n            filterId,\n            'isInstant',\n            'For parent filters changes must be applied instantly',\n          );\n        }\n      };\n\n      const validateCycles = (filterId: string, trace: string[] = []) => {\n        if (trace.includes(filterId)) {\n          addValidationError(\n            filterId,\n            'parentFilter',\n            'Cannot create cyclic hierarchy',\n          );\n        }\n        const parentId = formValues.filters[filterId]\n          ? formValues.filters[filterId].parentFilter?.value\n          : filterConfigMap[filterId]?.cascadeParentIds?.[0];\n        if (parentId) {\n          validateInstant(parentId);\n          validateCycles(parentId, [...trace, filterId]);\n        }\n      };\n\n      filterIds\n        .filter(id => !removedFilters[id])\n        .forEach(filterId => validateCycles(filterId));\n\n      return formValues;\n    } catch (error) {\n      console.warn('Filter configuration failed:', error);\n\n      if (!error.errorFields || !error.errorFields.length) return null; // not a validation error\n\n      // the name is in array format since the fields are nested\n      type ErrorFields = { name: ['filters', string, string] }[];\n      const errorFields = error.errorFields as ErrorFields;\n      // filter id is the second item in the field name\n      if (!errorFields.some(field => field.name[1] === currentFilterId)) {\n        // switch to the first tab that had a validation error\n        const filterError = errorFields.find(\n          field => field.name[0] === 'filters',\n        );\n        if (filterError) {\n          setCurrentFilterId(filterError.name[1]);\n        }\n      }\n      return null;\n    }\n  }, [form, currentFilterId, filterConfigMap, filterIds, removedFilters]);\n\n  const onOk = useCallback(async () => {\n    const values: NativeFiltersForm | null = await validateForm();\n    if (values == null) return;\n\n    const newFilterConfig: FilterConfiguration = filterIds\n      .filter(id => !removedFilters[id])\n      .map(id => {\n        // create a filter config object from the form inputs\n        const formInputs = values.filters[id];\n        // if user didn't open a filter, return the original config\n        if (!formInputs) return filterConfigMap[id];\n        return {\n          id,\n          name: formInputs.name,\n          type: 'text',\n          // for now there will only ever be one target\n          targets: [\n            {\n              datasetId: formInputs.dataset.value,\n              column: {\n                name: formInputs.column,\n              },\n            },\n          ],\n          defaultValue: formInputs.defaultValue || null,\n          cascadeParentIds: formInputs.parentFilter\n            ? [formInputs.parentFilter.value]\n            : [],\n          scope: {\n            rootPath: [DASHBOARD_ROOT_ID],\n            excluded: [],\n          },\n          inverseSelection: !!formInputs.inverseSelection,\n          isInstant: !!formInputs.isInstant,\n          allowsMultipleValues: !!formInputs.allowsMultipleValues,\n          isRequired: !!formInputs.isRequired,\n        };\n      });\n\n    await save(newFilterConfig);\n    resetForm();\n  }, [\n    save,\n    resetForm,\n    filterIds,\n    removedFilters,\n    filterConfigMap,\n    validateForm,\n  ]);\n\n  const confirmCancel = () => {\n    resetForm();\n    onCancel();\n  };\n\n  const unsavedFiltersIds = newFilterIds.filter(id => !removedFilters[id]);\n\n  const getUnsavedFilterNames = (): string => {\n    const unsavedFiltersNames = unsavedFiltersIds.map(\n      id => `\"${getFilterTitle(id)}\"`,\n    );\n\n    if (unsavedFiltersNames.length === 0) {\n      return '';\n    }\n\n    if (unsavedFiltersNames.length === 1) {\n      return unsavedFiltersNames[0];\n    }\n\n    const lastFilter = unsavedFiltersNames.pop();\n\n    return `${unsavedFiltersNames.join(', ')} ${t('and')} ${lastFilter}`;\n  };\n\n  const handleCancel = () => {\n    if (unsavedFiltersIds.length > 0) {\n      setSaveAlertVisible(true);\n    } else {\n      confirmCancel();\n    }\n  };\n\n  const renderFooterElements = (): React.ReactNode[] => {\n    if (saveAlertVisible) {\n      return [\n        <CancelConfirmationAlert\n          title={`${unsavedFiltersIds.length} ${t('unsaved filters')}`}\n          onConfirm={confirmCancel}\n          onDismiss={() => setSaveAlertVisible(false)}\n        >\n          {t(`Are you sure you want to cancel?`)} {getUnsavedFilterNames()}{' '}\n          {t(`will not be saved.`)}\n        </CancelConfirmationAlert>,\n      ];\n    }\n\n    return [\n      <Button key=\"cancel\" buttonStyle=\"secondary\" onClick={handleCancel}>\n        {t('Cancel')}\n      </Button>,\n      <Button key=\"submit\" buttonStyle=\"primary\" onClick={onOk}>\n        {t('Save')}\n      </Button>,\n    ];\n  };\n\n  return (\n    <StyledModal\n      visible={isOpen}\n      title={t('Filter configuration and scoping')}\n      width=\"55%\"\n      onCancel={handleCancel}\n      onOk={onOk}\n      centered\n      data-test=\"filter-modal\"\n      footer={renderFooterElements()}\n    >\n      <ErrorBoundary>\n        <StyledModalBody>\n          <StyledForm\n            form={form}\n            onValuesChange={(changes, values: NativeFiltersForm) => {\n              if (\n                changes.filters &&\n                Object.values(changes.filters).some(\n                  (filter: any) => filter.name != null,\n                )\n              ) {\n                // we only need to set this if a name changed\n                setFormValues(values);\n              }\n              setSaveAlertVisible(false);\n            }}\n            layout=\"vertical\"\n          >\n            <FilterTabs\n              tabPosition=\"left\"\n              onChange={setCurrentFilterId}\n              activeKey={currentFilterId}\n              onEdit={onTabEdit}\n              addIcon={\n                <StyledAddFilterBox>\n                  <PlusOutlined /> <span>{t('Add filter')}</span>\n                </StyledAddFilterBox>\n              }\n            >\n              {filterIds.map(id => (\n                <LineEditableTabs.TabPane\n                  tab={\n                    <FilterTabTitle\n                      className={removedFilters[id] ? 'removed' : ''}\n                    >\n                      <div>\n                        {removedFilters[id]\n                          ? t('(Removed)')\n                          : getFilterTitle(id)}\n                      </div>\n                      {removedFilters[id] && (\n                        <StyledSpan\n                          role=\"button\"\n                          tabIndex={0}\n                          onClick={() => restoreFilter(id)}\n                        >\n                          {t('Undo?')}\n                        </StyledSpan>\n                      )}\n                    </FilterTabTitle>\n                  }\n                  key={id}\n                  closeIcon={removedFilters[id] ? <></> : <DeleteFilled />}\n                >\n                  <FilterConfigForm\n                    form={form}\n                    filterId={id}\n                    filterToEdit={filterConfigMap[id]}\n                    removed={!!removedFilters[id]}\n                    restore={restoreFilter}\n                    parentFilters={getParentFilters(id)}\n                  />\n                </LineEditableTabs.TabPane>\n              ))}\n            </FilterTabs>\n          </StyledForm>\n        </StyledModalBody>\n      </ErrorBoundary>\n    </StyledModal>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}