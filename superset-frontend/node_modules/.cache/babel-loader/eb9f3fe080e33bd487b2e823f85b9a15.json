{"ast":null,"code":"(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport {\ntoggleExpandSlice,\nsetFocusedFilterField,\nunsetFocusedFilterField } from\n'../actions/dashboardState';\nimport { updateComponents } from '../actions/dashboardLayout';\nimport { changeFilter } from '../actions/dashboardFilters';\nimport { addDangerToast } from '../../messageToasts/actions';\nimport { refreshChart } from '../../chart/chartAction';\nimport { logEvent } from '../../logger/actions';\nimport {\ngetActiveFilters,\ngetAppliedFilterValues } from\n'../util/activeDashboardFilters';\nimport getFormDataWithExtraFilters from '../util/charts/getFormDataWithExtraFilters';\nimport Chart from '../components/gridComponents/Chart';\n\nconst EMPTY_FILTERS = {};\n\nfunction mapStateToProps(\n{\n  charts: chartQueries,\n  dashboardInfo,\n  dashboardState,\n  datasources,\n  sliceEntities,\n  nativeFilters },\n\nownProps)\n{\n  const { id } = ownProps;\n  const chart = chartQueries[id] || {};\n  const datasource =\n  chart && chart.form_data && datasources[chart.form_data.datasource] || {};\n  const { colorScheme, colorNamespace } = dashboardState;\n\n  // note: this method caches filters if possible to prevent render cascades\n  const formData = getFormDataWithExtraFilters({\n    chart,\n    filters: getAppliedFilterValues(id),\n    colorScheme,\n    colorNamespace,\n    sliceId: id,\n    nativeFilters });\n\n\n  formData.dashboardId = dashboardInfo.id;\n\n  return {\n    chart,\n    datasource,\n    slice: sliceEntities.slices[id],\n    timeout: dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    filters: getActiveFilters() || EMPTY_FILTERS,\n    formData,\n    editMode: dashboardState.editMode,\n    isExpanded: !!dashboardState.expandedSlices[id],\n    supersetCanExplore: !!dashboardInfo.superset_can_explore,\n    supersetCanCSV: !!dashboardInfo.superset_can_csv,\n    sliceCanEdit: !!dashboardInfo.slice_can_edit };\n\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n  {\n    updateComponents,\n    addDangerToast,\n    toggleExpandSlice,\n    changeFilter,\n    setFocusedFilterField,\n    unsetFocusedFilterField,\n    refreshChart,\n    logEvent },\n\n  dispatch);\n\n}const _default =\n\nconnect(mapStateToProps, mapDispatchToProps)(Chart);export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(EMPTY_FILTERS, \"EMPTY_FILTERS\", \"/app/superset-frontend/src/dashboard/containers/Chart.jsx\");reactHotLoader.register(mapStateToProps, \"mapStateToProps\", \"/app/superset-frontend/src/dashboard/containers/Chart.jsx\");reactHotLoader.register(mapDispatchToProps, \"mapDispatchToProps\", \"/app/superset-frontend/src/dashboard/containers/Chart.jsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/containers/Chart.jsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/containers/Chart.jsx"],"names":["bindActionCreators","connect","toggleExpandSlice","setFocusedFilterField","unsetFocusedFilterField","updateComponents","changeFilter","addDangerToast","refreshChart","logEvent","getActiveFilters","getAppliedFilterValues","getFormDataWithExtraFilters","Chart","EMPTY_FILTERS","mapStateToProps","charts","chartQueries","dashboardInfo","dashboardState","datasources","sliceEntities","nativeFilters","ownProps","id","chart","datasource","form_data","colorScheme","colorNamespace","formData","filters","sliceId","dashboardId","slice","slices","timeout","common","conf","SUPERSET_WEBSERVER_TIMEOUT","editMode","isExpanded","expandedSlices","supersetCanExplore","superset_can_explore","supersetCanCSV","superset_can_csv","sliceCanEdit","slice_can_edit","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n\nimport {\n  toggleExpandSlice,\n  setFocusedFilterField,\n  unsetFocusedFilterField,\n} from '../actions/dashboardState';\nimport { updateComponents } from '../actions/dashboardLayout';\nimport { changeFilter } from '../actions/dashboardFilters';\nimport { addDangerToast } from '../../messageToasts/actions';\nimport { refreshChart } from '../../chart/chartAction';\nimport { logEvent } from '../../logger/actions';\nimport {\n  getActiveFilters,\n  getAppliedFilterValues,\n} from '../util/activeDashboardFilters';\nimport getFormDataWithExtraFilters from '../util/charts/getFormDataWithExtraFilters';\nimport Chart from '../components/gridComponents/Chart';\n\nconst EMPTY_FILTERS = {};\n\nfunction mapStateToProps(\n  {\n    charts: chartQueries,\n    dashboardInfo,\n    dashboardState,\n    datasources,\n    sliceEntities,\n    nativeFilters,\n  },\n  ownProps,\n) {\n  const { id } = ownProps;\n  const chart = chartQueries[id] || {};\n  const datasource =\n    (chart && chart.form_data && datasources[chart.form_data.datasource]) || {};\n  const { colorScheme, colorNamespace } = dashboardState;\n\n  // note: this method caches filters if possible to prevent render cascades\n  const formData = getFormDataWithExtraFilters({\n    chart,\n    filters: getAppliedFilterValues(id),\n    colorScheme,\n    colorNamespace,\n    sliceId: id,\n    nativeFilters,\n  });\n\n  formData.dashboardId = dashboardInfo.id;\n\n  return {\n    chart,\n    datasource,\n    slice: sliceEntities.slices[id],\n    timeout: dashboardInfo.common.conf.SUPERSET_WEBSERVER_TIMEOUT,\n    filters: getActiveFilters() || EMPTY_FILTERS,\n    formData,\n    editMode: dashboardState.editMode,\n    isExpanded: !!dashboardState.expandedSlices[id],\n    supersetCanExplore: !!dashboardInfo.superset_can_explore,\n    supersetCanCSV: !!dashboardInfo.superset_can_csv,\n    sliceCanEdit: !!dashboardInfo.slice_can_edit,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators(\n    {\n      updateComponents,\n      addDangerToast,\n      toggleExpandSlice,\n      changeFilter,\n      setFocusedFilterField,\n      unsetFocusedFilterField,\n      refreshChart,\n      logEvent,\n    },\n    dispatch,\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Chart);\n"]},"metadata":{},"sourceType":"module"}