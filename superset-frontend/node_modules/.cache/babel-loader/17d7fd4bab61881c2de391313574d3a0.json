{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _mapInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/map\";import _includesInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/includes\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { t, useTheme, css } from '@superset-ui/core';\nimport { SearchOutlined, MinusCircleFilled, CheckCircleFilled, ExclamationCircleFilled } from '@ant-design/icons';\nimport { Collapse, Popover } from 'src/common/components/index';\nimport { Global } from '@emotion/core';\nimport { Indent, Item, ItemIcon, Panel, Reset, Title, FilterValue } from './Styles';import { jsx as ___EmotionJSX } from \"@emotion/core\";\nconst Indicator = ({ indicator: { column, name, value = [], path }, onClick }) => ___EmotionJSX(Item, { onClick: () => onClick([...path, `LABEL-${column}`]) },\n___EmotionJSX(Title, { bold: true },\n___EmotionJSX(ItemIcon, null,\n___EmotionJSX(SearchOutlined, null)),\n\nname.toUpperCase(),\nvalue.length ? ': ' : ''),\n\n___EmotionJSX(FilterValue, null, value.length ? value.join(', ') : ''));\n\nconst DetailsPanelPopover = ({ appliedIndicators = [], incompatibleIndicators = [], unsetIndicators = [], onHighlightFilterSource, children }) => {\n  const theme = useTheme();\n  function defaultActivePanel() {\n    if (incompatibleIndicators.length)\n    return 'incompatible';\n    if (appliedIndicators.length)\n    return 'applied';\n    return 'unset';\n  }\n  const [activePanels, setActivePanels] = useState(() => [\n  defaultActivePanel()]);\n\n  function handlePopoverStatus(isOpen) {\n    // every time the popover opens, make sure the most relevant panel is active\n    if (isOpen) {\n      if (!_includesInstanceProperty(activePanels).call(activePanels, defaultActivePanel())) {\n        setActivePanels([...activePanels, defaultActivePanel()]);\n      }\n    }\n  }\n  function handleActivePanelChange(panels) {\n    // need to convert to an array so that handlePopoverStatus will work\n    if (typeof panels === 'string') {\n      setActivePanels([panels]);\n    } else\n    {\n      setActivePanels(panels);\n    }\n  }\n  const content = ___EmotionJSX(Panel, null,\n  ___EmotionJSX(Global, { styles: css`\n          .filterStatusPopover {\n            .ant-popover-inner {\n              background-color: ${theme.colors.grayscale.dark2}cc;\n              .ant-popover-inner-content {\n                padding-top: 0;\n                padding-bottom: 0;\n              }\n            }\n            &.ant-popover-placement-bottom,\n            &.ant-popover-placement-bottomLeft,\n            &.ant-popover-placement-bottomRight {\n              & > .ant-popover-content > .ant-popover-arrow {\n                border-top-color: ${theme.colors.grayscale.dark2}cc;\n                border-left-color: ${theme.colors.grayscale.dark2}cc;\n              }\n            }\n            &.ant-popover-placement-top,\n            &.ant-popover-placement-topLeft,\n            &.ant-popover-placement-topRight {\n              & > .ant-popover-content > .ant-popover-arrow {\n                border-bottom-color: ${theme.colors.grayscale.dark2}cc;\n                border-right-color: ${theme.colors.grayscale.dark2}cc;\n              }\n            }\n            &.ant-popover-placement-left,\n            &.ant-popover-placement-leftTop,\n            &.ant-popover-placement-leftBottom {\n              & > .ant-popover-content > .ant-popover-arrow {\n                border-top-color: ${theme.colors.grayscale.dark2}cc;\n                border-right-color: ${theme.colors.grayscale.dark2}cc;\n              }\n            }\n            &.ant-popover-placement-right,\n            &.ant-popover-placement-rightTop,\n            &.ant-popover-placement-rightBottom {\n              & > .ant-popover-content > .ant-popover-arrow {\n                border-bottom-color: ${theme.colors.grayscale.dark2}cc;\n                border-left-color: ${theme.colors.grayscale.dark2}cc;\n              }\n            }\n            &.ant-popover {\n              color: ${theme.colors.grayscale.light4};\n            }\n          }\n        ` }),\n  ___EmotionJSX(Reset, null,\n  ___EmotionJSX(Collapse, { ghost: true, light: true, activeKey: activePanels, onChange: handleActivePanelChange },\n  appliedIndicators.length ? ___EmotionJSX(Collapse.Panel, { key: \"applied\", header: ___EmotionJSX(Title, { bold: true, color: theme.colors.success.base },\n    ___EmotionJSX(CheckCircleFilled, null), ' ',\n    t('Applied Filters (%d)', appliedIndicators.length)) },\n\n  ___EmotionJSX(Indent, null,\n  _mapInstanceProperty(appliedIndicators).call(appliedIndicators, indicator => ___EmotionJSX(Indicator, { key: indicator.column, indicator: indicator, onClick: onHighlightFilterSource })))) :\n\n  null,\n  incompatibleIndicators.length ? ___EmotionJSX(Collapse.Panel, { key: \"incompatible\", header: ___EmotionJSX(Title, { bold: true, color: theme.colors.alert.base },\n    ___EmotionJSX(ExclamationCircleFilled, null), ' ',\n    t('Incompatible Filters (%d)', incompatibleIndicators.length)) },\n\n  ___EmotionJSX(Indent, null,\n  _mapInstanceProperty(incompatibleIndicators).call(incompatibleIndicators, indicator => ___EmotionJSX(Indicator, { key: indicator.column, indicator: indicator, onClick: onHighlightFilterSource })))) :\n\n  null,\n  unsetIndicators.length ? ___EmotionJSX(Collapse.Panel, { key: \"unset\", header: ___EmotionJSX(Title, { bold: true, color: theme.colors.grayscale.light1 },\n    ___EmotionJSX(MinusCircleFilled, null), ' ',\n    t('Unset Filters (%d)', unsetIndicators.length)),\n    disabled: !unsetIndicators.length },\n  ___EmotionJSX(Indent, null,\n  _mapInstanceProperty(unsetIndicators).call(unsetIndicators, indicator => ___EmotionJSX(Indicator, { key: indicator.column, indicator: indicator, onClick: onHighlightFilterSource })))) :\n\n  null)));\n\n\n\n  return ___EmotionJSX(Popover, { overlayClassName: \"filterStatusPopover\", content: content, onVisibleChange: handlePopoverStatus, placement: \"bottom\", trigger: \"click\" },\n  children);\n\n};__signature__(DetailsPanelPopover, \"useTheme{theme}\\nuseState{[activePanels, setActivePanels](() => [\\n        defaultActivePanel(),\\n    ])}\", () => [useTheme]);const _default =\nDetailsPanelPopover;export default _default;;(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(Indicator, \"Indicator\", \"/app/superset-frontend/src/dashboard/components/FiltersBadge/DetailsPanel.tsx\");reactHotLoader.register(DetailsPanelPopover, \"DetailsPanelPopover\", \"/app/superset-frontend/src/dashboard/components/FiltersBadge/DetailsPanel.tsx\");reactHotLoader.register(_default, \"default\", \"/app/superset-frontend/src/dashboard/components/FiltersBadge/DetailsPanel.tsx\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/dashboard/components/FiltersBadge/DetailsPanel.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { t, useTheme, css } from '@superset-ui/core';\nimport {\n  SearchOutlined,\n  MinusCircleFilled,\n  CheckCircleFilled,\n  ExclamationCircleFilled,\n} from '@ant-design/icons';\nimport { Collapse, Popover } from 'src/common/components/index';\nimport { Global } from '@emotion/core';\nimport {\n  Indent,\n  Item,\n  ItemIcon,\n  Panel,\n  Reset,\n  Title,\n  FilterValue,\n} from './Styles';\nimport { Indicator } from './selectors';\n\nexport interface IndicatorProps {\n  indicator: Indicator;\n  onClick: (path: string[]) => void;\n}\n\nconst Indicator = ({\n  indicator: { column, name, value = [], path },\n  onClick,\n}: IndicatorProps) => (\n  <Item onClick={() => onClick([...path, `LABEL-${column}`])}>\n    <Title bold>\n      <ItemIcon>\n        <SearchOutlined />\n      </ItemIcon>\n      {name.toUpperCase()}\n      {value.length ? ': ' : ''}\n    </Title>\n    <FilterValue>{value.length ? value.join(', ') : ''}</FilterValue>\n  </Item>\n);\n\nexport interface DetailsPanelProps {\n  appliedIndicators: Indicator[];\n  incompatibleIndicators: Indicator[];\n  unsetIndicators: Indicator[];\n  onHighlightFilterSource: (path: string[]) => void;\n  children: JSX.Element;\n}\n\nconst DetailsPanelPopover = ({\n  appliedIndicators = [],\n  incompatibleIndicators = [],\n  unsetIndicators = [],\n  onHighlightFilterSource,\n  children,\n}: DetailsPanelProps) => {\n  const theme = useTheme();\n\n  function defaultActivePanel() {\n    if (incompatibleIndicators.length) return 'incompatible';\n    if (appliedIndicators.length) return 'applied';\n    return 'unset';\n  }\n\n  const [activePanels, setActivePanels] = useState<string[]>(() => [\n    defaultActivePanel(),\n  ]);\n\n  function handlePopoverStatus(isOpen: boolean) {\n    // every time the popover opens, make sure the most relevant panel is active\n    if (isOpen) {\n      if (!activePanels.includes(defaultActivePanel())) {\n        setActivePanels([...activePanels, defaultActivePanel()]);\n      }\n    }\n  }\n\n  function handleActivePanelChange(panels: string | string[]) {\n    // need to convert to an array so that handlePopoverStatus will work\n    if (typeof panels === 'string') {\n      setActivePanels([panels]);\n    } else {\n      setActivePanels(panels);\n    }\n  }\n\n  const content = (\n    <Panel>\n      <Global\n        styles={css`\n          .filterStatusPopover {\n            .ant-popover-inner {\n              background-color: ${theme.colors.grayscale.dark2}cc;\n              .ant-popover-inner-content {\n                padding-top: 0;\n                padding-bottom: 0;\n              }\n            }\n            &.ant-popover-placement-bottom,\n            &.ant-popover-placement-bottomLeft,\n            &.ant-popover-placement-bottomRight {\n              & > .ant-popover-content > .ant-popover-arrow {\n                border-top-color: ${theme.colors.grayscale.dark2}cc;\n                border-left-color: ${theme.colors.grayscale.dark2}cc;\n              }\n            }\n            &.ant-popover-placement-top,\n            &.ant-popover-placement-topLeft,\n            &.ant-popover-placement-topRight {\n              & > .ant-popover-content > .ant-popover-arrow {\n                border-bottom-color: ${theme.colors.grayscale.dark2}cc;\n                border-right-color: ${theme.colors.grayscale.dark2}cc;\n              }\n            }\n            &.ant-popover-placement-left,\n            &.ant-popover-placement-leftTop,\n            &.ant-popover-placement-leftBottom {\n              & > .ant-popover-content > .ant-popover-arrow {\n                border-top-color: ${theme.colors.grayscale.dark2}cc;\n                border-right-color: ${theme.colors.grayscale.dark2}cc;\n              }\n            }\n            &.ant-popover-placement-right,\n            &.ant-popover-placement-rightTop,\n            &.ant-popover-placement-rightBottom {\n              & > .ant-popover-content > .ant-popover-arrow {\n                border-bottom-color: ${theme.colors.grayscale.dark2}cc;\n                border-left-color: ${theme.colors.grayscale.dark2}cc;\n              }\n            }\n            &.ant-popover {\n              color: ${theme.colors.grayscale.light4};\n            }\n          }\n        `}\n      />\n      <Reset>\n        <Collapse\n          ghost\n          light\n          activeKey={activePanels}\n          onChange={handleActivePanelChange}\n        >\n          {appliedIndicators.length ? (\n            <Collapse.Panel\n              key=\"applied\"\n              header={\n                <Title bold color={theme.colors.success.base}>\n                  <CheckCircleFilled />{' '}\n                  {t('Applied Filters (%d)', appliedIndicators.length)}\n                </Title>\n              }\n            >\n              <Indent>\n                {appliedIndicators.map(indicator => (\n                  <Indicator\n                    key={indicator.column}\n                    indicator={indicator}\n                    onClick={onHighlightFilterSource}\n                  />\n                ))}\n              </Indent>\n            </Collapse.Panel>\n          ) : null}\n          {incompatibleIndicators.length ? (\n            <Collapse.Panel\n              key=\"incompatible\"\n              header={\n                <Title bold color={theme.colors.alert.base}>\n                  <ExclamationCircleFilled />{' '}\n                  {t(\n                    'Incompatible Filters (%d)',\n                    incompatibleIndicators.length,\n                  )}\n                </Title>\n              }\n            >\n              <Indent>\n                {incompatibleIndicators.map(indicator => (\n                  <Indicator\n                    key={indicator.column}\n                    indicator={indicator}\n                    onClick={onHighlightFilterSource}\n                  />\n                ))}\n              </Indent>\n            </Collapse.Panel>\n          ) : null}\n          {unsetIndicators.length ? (\n            <Collapse.Panel\n              key=\"unset\"\n              header={\n                <Title bold color={theme.colors.grayscale.light1}>\n                  <MinusCircleFilled />{' '}\n                  {t('Unset Filters (%d)', unsetIndicators.length)}\n                </Title>\n              }\n              disabled={!unsetIndicators.length}\n            >\n              <Indent>\n                {unsetIndicators.map(indicator => (\n                  <Indicator\n                    key={indicator.column}\n                    indicator={indicator}\n                    onClick={onHighlightFilterSource}\n                  />\n                ))}\n              </Indent>\n            </Collapse.Panel>\n          ) : null}\n        </Collapse>\n      </Reset>\n    </Panel>\n  );\n\n  return (\n    <Popover\n      overlayClassName=\"filterStatusPopover\"\n      content={content}\n      onVisibleChange={handlePopoverStatus}\n      placement=\"bottom\"\n      trigger=\"click\"\n    >\n      {children}\n    </Popover>\n  );\n};\n\nexport default DetailsPanelPopover;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}