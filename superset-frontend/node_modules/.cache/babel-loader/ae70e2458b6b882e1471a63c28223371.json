{"ast":null,"code":"import \"core-js/modules/web.dom-collections.iterator.js\";import _Date$now from \"@babel/runtime-corejs3/core-js-stable/date/now\";import _Object$values from \"@babel/runtime-corejs3/core-js-stable/object/values\";import _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";import _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";(function () {var enterModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.enterModule : undefined;enterModule && enterModule(module);})();var __signature__ = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default.signature : function (a) {return a;}; /**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport getToastsFromPyFlashMessages from '../../messageToasts/utils/getToastsFromPyFlashMessages';\n\nexport default function getInitialState({\n  defaultDbId,\n  common,\n  active_tab: activeTab,\n  tab_state_ids: tabStateIds = [],\n  databases,\n  queries: queries_,\n  requested_query: requestedQuery,\n  user })\n{\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  const queryEditors = [];\n  const defaultQueryEditor = {\n    id: null,\n    loaded: true,\n    title: t('Untitled query'),\n    sql: 'SELECT *\\nFROM\\nWHERE',\n    selectedText: null,\n    latestQueryId: null,\n    autorun: false,\n    templateParams: null,\n    dbId: defaultDbId,\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    validationResult: {\n      id: null,\n      errors: [],\n      completed: false },\n\n    queryCostEstimate: {\n      cost: null,\n      completed: false,\n      error: null } };\n\n\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  _forEachInstanceProperty(tabStateIds).call(tabStateIds, ({ id, label }) => {\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {\n      queryEditor = {\n        id: id.toString(),\n        loaded: true,\n        title: activeTab.label,\n        sql: activeTab.sql,\n        selectedText: null,\n        latestQueryId: activeTab.latest_query ?\n        activeTab.latest_query.id :\n        null,\n        autorun: activeTab.autorun,\n        templateParams: activeTab.template_params,\n        dbId: activeTab.database_id,\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        validationResult: {\n          id: null,\n          errors: [],\n          completed: false } };\n\n\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        title: label };\n\n    }\n    queryEditors.push(queryEditor);\n  });\n\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  const tables = [];\n  if (activeTab) {var _context, _context2;\n    _forEachInstanceProperty(_context = _filterInstanceProperty(_context2 = activeTab.table_schemas).call(_context2,\n    tableSchema => tableSchema.description !== null)).call(_context,\n    tableSchema => {\n      const {\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes,\n        dataPreviewQueryId } =\n      tableSchema.description;\n      const table = {\n        dbId: tableSchema.database_id,\n        queryEditorId: tableSchema.tab_state_id.toString(),\n        schema: tableSchema.schema,\n        name: tableSchema.table,\n        expanded: tableSchema.expanded,\n        id: tableSchema.id,\n        isMetadataLoading: false,\n        isExtraMetadataLoading: false,\n        dataPreviewQueryId,\n        columns,\n        selectStar,\n        primaryKey,\n        foreignKeys,\n        indexes };\n\n      tables.push(table);\n    });\n  }\n\n  const queries = { ...queries_ };\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  if (\n  localStorage.getItem('redux') &&\n  JSON.parse(localStorage.getItem('redux')).sqlLab)\n  {\n    const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n\n    if (sqlLab.queryEditors.length === 0) {\n      // migration was successful\n      localStorage.removeItem('redux');\n    } else {var _context3, _context4, _context5;\n      // add query editors and tables to state with a special flag so they can\n      // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n      _forEachInstanceProperty(_context3 = sqlLab.queryEditors).call(_context3, (qe) =>\n      queryEditors.push({\n        ...qe,\n        inLocalStorage: true,\n        loaded: true }));\n\n\n      _forEachInstanceProperty(_context4 = sqlLab.tables).call(_context4, (table) =>\n      tables.push({ ...table, inLocalStorage: true }));\n\n      _forEachInstanceProperty(_context5 = _Object$values(sqlLab.queries)).call(_context5, query => {\n        queries[query.id] = { ...query, inLocalStorage: true };\n      });\n      tabHistory.push(...sqlLab.tabHistory);\n    }\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries,\n      queryEditors,\n      tabHistory,\n      tables,\n      queriesLastUpdate: _Date$now(),\n      user },\n\n    requestedQuery,\n    messageToasts: getToastsFromPyFlashMessages(\n    (common || {}).flash_messages || []),\n\n    localStorageUsageInKilobytes: 0,\n    common: {\n      flash_messages: common.flash_messages,\n      conf: common.conf } };\n\n\n};(function () {var reactHotLoader = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.default : undefined;if (!reactHotLoader) {return;}reactHotLoader.register(getInitialState, \"getInitialState\", \"/app/superset-frontend/src/SqlLab/reducers/getInitialState.js\");})();;(function () {var leaveModule = typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal.leaveModule : undefined;leaveModule && leaveModule(module);})();","map":{"version":3,"sources":["/app/superset-frontend/src/SqlLab/reducers/getInitialState.js"],"names":["t","getToastsFromPyFlashMessages","getInitialState","defaultDbId","common","active_tab","activeTab","tab_state_ids","tabStateIds","databases","queries","queries_","requested_query","requestedQuery","user","queryEditors","defaultQueryEditor","id","loaded","title","sql","selectedText","latestQueryId","autorun","templateParams","dbId","queryLimit","conf","DEFAULT_SQLLAB_LIMIT","validationResult","errors","completed","queryCostEstimate","cost","error","label","queryEditor","toString","latest_query","template_params","database_id","schema","query_limit","push","tabHistory","tables","table_schemas","tableSchema","description","columns","selectStar","primaryKey","foreignKeys","indexes","dataPreviewQueryId","table","queryEditorId","tab_state_id","name","expanded","isMetadataLoading","isExtraMetadataLoading","localStorage","getItem","JSON","parse","sqlLab","length","removeItem","qe","inLocalStorage","query","activeSouthPaneTab","alerts","offline","queriesLastUpdate","messageToasts","flash_messages","localStorageUsageInKilobytes"],"mappings":"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","sourcesContent":["/**\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { t } from '@superset-ui/core';\nimport getToastsFromPyFlashMessages from '../../messageToasts/utils/getToastsFromPyFlashMessages';\n\nexport default function getInitialState({\n  defaultDbId,\n  common,\n  active_tab: activeTab,\n  tab_state_ids: tabStateIds = [],\n  databases,\n  queries: queries_,\n  requested_query: requestedQuery,\n  user,\n}) {\n  /**\n   * Before YYYY-MM-DD, the state for SQL Lab was stored exclusively in the\n   * browser's localStorage. The feature flag `SQLLAB_BACKEND_PERSISTENCE`\n   * moves the state to the backend instead, migrating it from local storage.\n   *\n   * To allow for a transparent migration, the initial state is a combination\n   * of the backend state (if any) with the browser state (if any).\n   */\n  const queryEditors = [];\n  const defaultQueryEditor = {\n    id: null,\n    loaded: true,\n    title: t('Untitled query'),\n    sql: 'SELECT *\\nFROM\\nWHERE',\n    selectedText: null,\n    latestQueryId: null,\n    autorun: false,\n    templateParams: null,\n    dbId: defaultDbId,\n    queryLimit: common.conf.DEFAULT_SQLLAB_LIMIT,\n    validationResult: {\n      id: null,\n      errors: [],\n      completed: false,\n    },\n    queryCostEstimate: {\n      cost: null,\n      completed: false,\n      error: null,\n    },\n  };\n\n  /**\n   * Load state from the backend. This will be empty if the feature flag\n   * `SQLLAB_BACKEND_PERSISTENCE` is off.\n   */\n  tabStateIds.forEach(({ id, label }) => {\n    let queryEditor;\n    if (activeTab && activeTab.id === id) {\n      queryEditor = {\n        id: id.toString(),\n        loaded: true,\n        title: activeTab.label,\n        sql: activeTab.sql,\n        selectedText: null,\n        latestQueryId: activeTab.latest_query\n          ? activeTab.latest_query.id\n          : null,\n        autorun: activeTab.autorun,\n        templateParams: activeTab.template_params,\n        dbId: activeTab.database_id,\n        schema: activeTab.schema,\n        queryLimit: activeTab.query_limit,\n        validationResult: {\n          id: null,\n          errors: [],\n          completed: false,\n        },\n      };\n    } else {\n      // dummy state, actual state will be loaded on tab switch\n      queryEditor = {\n        ...defaultQueryEditor,\n        id: id.toString(),\n        loaded: false,\n        title: label,\n      };\n    }\n    queryEditors.push(queryEditor);\n  });\n\n  const tabHistory = activeTab ? [activeTab.id.toString()] : [];\n  const tables = [];\n  if (activeTab) {\n    activeTab.table_schemas\n      .filter(tableSchema => tableSchema.description !== null)\n      .forEach(tableSchema => {\n        const {\n          columns,\n          selectStar,\n          primaryKey,\n          foreignKeys,\n          indexes,\n          dataPreviewQueryId,\n        } = tableSchema.description;\n        const table = {\n          dbId: tableSchema.database_id,\n          queryEditorId: tableSchema.tab_state_id.toString(),\n          schema: tableSchema.schema,\n          name: tableSchema.table,\n          expanded: tableSchema.expanded,\n          id: tableSchema.id,\n          isMetadataLoading: false,\n          isExtraMetadataLoading: false,\n          dataPreviewQueryId,\n          columns,\n          selectStar,\n          primaryKey,\n          foreignKeys,\n          indexes,\n        };\n        tables.push(table);\n      });\n  }\n\n  const queries = { ...queries_ };\n\n  /**\n   * If the `SQLLAB_BACKEND_PERSISTENCE` feature flag is off, or if the user\n   * hasn't used SQL Lab after it has been turned on, the state will be stored\n   * in the browser's local storage.\n   */\n  if (\n    localStorage.getItem('redux') &&\n    JSON.parse(localStorage.getItem('redux')).sqlLab\n  ) {\n    const { sqlLab } = JSON.parse(localStorage.getItem('redux'));\n\n    if (sqlLab.queryEditors.length === 0) {\n      // migration was successful\n      localStorage.removeItem('redux');\n    } else {\n      // add query editors and tables to state with a special flag so they can\n      // be migrated if the `SQLLAB_BACKEND_PERSISTENCE` feature flag is on\n      sqlLab.queryEditors.forEach(qe =>\n        queryEditors.push({\n          ...qe,\n          inLocalStorage: true,\n          loaded: true,\n        }),\n      );\n      sqlLab.tables.forEach(table =>\n        tables.push({ ...table, inLocalStorage: true }),\n      );\n      Object.values(sqlLab.queries).forEach(query => {\n        queries[query.id] = { ...query, inLocalStorage: true };\n      });\n      tabHistory.push(...sqlLab.tabHistory);\n    }\n  }\n\n  return {\n    sqlLab: {\n      activeSouthPaneTab: 'Results',\n      alerts: [],\n      databases,\n      offline: false,\n      queries,\n      queryEditors,\n      tabHistory,\n      tables,\n      queriesLastUpdate: Date.now(),\n      user,\n    },\n    requestedQuery,\n    messageToasts: getToastsFromPyFlashMessages(\n      (common || {}).flash_messages || [],\n    ),\n    localStorageUsageInKilobytes: 0,\n    common: {\n      flash_messages: common.flash_messages,\n      conf: common.conf,\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}